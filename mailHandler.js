//x·ª≠ l√Ω c√°c th√¥ng b√°o t·ª´ banks
function processBankAlerts() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet();
  const threads = GmailApp.search('-is:starred');

  for (let thread of threads) {
    const messages = thread.getMessages();

    for (let message of messages) {    
      // Tr√≠ch xu·∫•t th√¥ng tin t·ª±a v√† n·ªôi dung t·ª´ email
      let body = trimCICMailBody(message.getPlainBody());
      const subject = message.getSubject();    

      //x√≥a c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát
      body = body.replace(/[*&]/g, ' ');

      Logger.log (subject);
      Logger.log (body);

      // G·ªçi OpenAI ƒë·ªÉ ph√¢n lo·∫°i th√¥ng minh - c√≥ th·ªÉ l√† giao d·ªãch ho·∫∑c c·∫≠p nh·∫≠t s·ªë d∆∞
      const aiResult = classifyBankBalanceWithOpenAI(subject, body);

      // Ki·ªÉm tra intent t·ª´ k·∫øt qu·∫£ AI
      if (aiResult.intent === 'UpdateBankBalance') {
        // X·ª≠ l√Ω c·∫≠p nh·∫≠t s·ªë d∆∞ t√†i kho·∫£n
        const { accountNumber, balance, date, group } = aiResult;
        
        if (!accountNumber || !balance) {
          Logger.log(`Thi·∫øu th√¥ng tin s·ªë d∆∞ t√†i kho·∫£n: ${subject}`);
          message.star();
          message.markRead();
          continue;
        }

        // C·∫≠p nh·∫≠t s·ªë d∆∞ t√†i kho·∫£n
        const updateResult = updateBankAccountBalance(accountNumber, balance, date);
        
        if (updateResult.success) {
          // G·ª≠i th√¥ng b√°o c·∫≠p nh·∫≠t th√†nh c√¥ng
          sendTelegramMessage(updateResult.message);
          
        } else {
          // G·ª≠i th√¥ng b√°o l·ªói
          sendTelegramMessage(updateResult.error);
        }
        
      } else if (aiResult.intent === 'AddTx') {
        // X·ª≠ l√Ω giao d·ªãch th√¥ng th∆∞·ªùng (gi·ªØ nguy√™n logic c≈©)
        const groupTx = aiResult.group || 'üõí Chi ph√≠ bi·∫øn ƒë·ªïi';
        const typeTx = aiResult.type || 'Thu';
        const dateTx = aiResult.date || '';
        const descTx = aiResult.desc || '';
        const amountTx = aiResult.amount || '0';
        const locationTx = aiResult.location || 'N/A';
        const categoryTx = aiResult.category || 'Kh√°c';
        const bankcommentTx = aiResult.bankcomment || '';
        
        //ki·∫øm tra xem giao d·ªãch c√≥ t·ªìn t·∫°i ch∆∞a
        const tx = {
          date: dateTx,
          amount: amountTx,
          description: descTx,
          bankComment: bankcommentTx,
          category: categoryTx,
          group: groupTx, 
          type: typeTx,
          location: locationTx
        };

        const checkResult = checkAndConfirmTransaction(tx);
        if (checkResult.exists) {
          //g·ª≠i th√¥ng b√°o Telegram ƒë·ªÉ x√°c nh·∫≠n
          sendTelegramMessage (checkResult.message);
        } else {
          //th√™m m·ªõi giao d·ªãch
          const addResult = addConfirmedTransaction(groupTx, tx);      
          sendTelegramMessage (addResult.message);  
          if (!addResult.success) {
            sendTelegramMessage (addResult.error);
            continue;
          }
        }
      } else {
        // Intent kh√¥ng x√°c ƒë·ªãnh ho·∫∑c l·ªói
        Logger.log(`Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c lo·∫°i th√¥ng b√°o: ${subject}`);
        sendTelegramMessage(`‚ùì Kh√¥ng th·ªÉ x√°c ƒë·ªãnh lo·∫°i th√¥ng b√°o t·ª´ email: ${subject}`);
      }

      // ƒê√°nh d·∫•u ƒë√£ x·ª≠ l√Ω
      message.star();
      message.markRead();
    }
  }
}

//ki·ªÉm tra xem email c√≥ ph·∫£i l√† giao d·ªãch h·ª£p l·ªá kh√¥ng
function isValidTransaction(aiResult, subject, body, message = null) {
  // Ki·ªÉm tra c√°c d·∫•u hi·ªáu c·ªßa email spam ho·∫∑c kh√¥ng ph·∫£i giao d·ªãch

  // 1. Ki·ªÉm tra k·∫øt qu·∫£ AI c√≥ h·ª£p l·ªá kh√¥ng
  if (!aiResult || typeof aiResult !== 'object') {
    return false;
  }

  // 2. Ki·ªÉm tra intent
  if (aiResult.intent === 'UpdateBankBalance') {
    // Ki·ªÉm tra th√¥ng tin s·ªë d∆∞ t√†i kho·∫£n
    const invalidValues = ['N/A', '', null, undefined];
    
    if (invalidValues.includes(aiResult.accountNumber) || 
        invalidValues.includes(aiResult.balance)) {
      return false;
    }
    
    // Ki·ªÉm tra ƒë·ªãnh d·∫°ng s·ªë ti·ªÅn
    if (aiResult.balance) {
      const balanceStr = aiResult.balance.toString().replace(/[‚Ç¨\s,]/g, '');
      const balanceNum = parseFloat(balanceStr);
      
      if (isNaN(balanceNum) || balanceNum < 0) {
        return false;
      }
    }
    
    return true;
  } else if (aiResult.intent === 'AddTx') {
    // Ki·ªÉm tra giao d·ªãch th√¥ng th∆∞·ªùng
    const invalidValues = ['N/A', '', null, undefined, '0', '‚Ç¨0.00', '0.00'];

    // N·∫øu group l√† N/A th√¨ ch·∫Øc ch·∫Øn kh√¥ng ph·∫£i giao d·ªãch
    if (invalidValues.includes(aiResult.group)) {
      return false;
    }

    // N·∫øu amount l√† 0 ho·∫∑c N/A th√¨ c√≥ th·ªÉ kh√¥ng ph·∫£i giao d·ªãch th·ª±c
    if (invalidValues.includes(aiResult.amount)) {
      return false;
    }

    // 3. Ki·ªÉm tra subject c√≥ ch·ª©a t·ª´ kh√≥a spam
    const spamKeywords = [
      'script', 'error', 'l·ªói', 'th√¥ng b√°o l·ªói', 'notification error',
      'spam', 'advertisement', 'qu·∫£ng c√°o', 'khuy·∫øn m√£i', 'promotion',
      'newsletter', 'unsubscribe', 'marketing', 'survey', 'kh·∫£o s√°t'
    ];

    const subjectLower = subject.toLowerCase();
    for (const keyword of spamKeywords) {
      if (subjectLower.includes(keyword.toLowerCase())) {
        return false;
      }
    }  

    // 4. Ki·ªÉm tra ƒë·ªãnh d·∫°ng s·ªë ti·ªÅn c√≥ h·ª£p l·ªá kh√¥ng
    if (aiResult.amount) {
      const amountStr = aiResult.amount.toString().replace(/[‚Ç¨\s,]/g, '');
      const amountNum = parseFloat(amountStr);

      // N·∫øu s·ªë ti·ªÅn <= 0 ho·∫∑c kh√¥ng ph·∫£i s·ªë th√¨ kh√¥ng h·ª£p l·ªá
      if (isNaN(amountNum) || amountNum <= 0) {
        return false;
      }

      // N·∫øu s·ªë ti·ªÅn qu√° l·ªõn (> 50,000 EUR) c√≥ th·ªÉ l√† spam
      if (amountNum > 50000) {
        return false;
      }
    }

    // 5. Ki·ªÉm tra ng√†y c√≥ h·ª£p l·ªá kh√¥ng
    if (aiResult.date) {
      try {
        const dateParts = aiResult.date.split('/');
        if (dateParts.length === 3) {
          const day = parseInt(dateParts[0]);
          const month = parseInt(dateParts[1]);
          const year = parseInt(dateParts[2]);

          // Ki·ªÉm tra ng√†y c√≥ h·ª£p l·ªá kh√¥ng
          if (day < 1 || day > 31 || month < 1 || month > 12 || year < 2020 || year > 2030) {
            return false;
          }
        }
      } catch (e) {
        // N·∫øu kh√¥ng parse ƒë∆∞·ª£c ng√†y th√¨ c√≥ th·ªÉ kh√¥ng h·ª£p l·ªá
        return false;
      }
    }

    return true;
  }

  // N·∫øu kh√¥ng c√≥ intent ho·∫∑c intent kh√¥ng h·ª£p l·ªá
  return false;
}

//c·∫Øt g·ªçn mail body
function trimCICMailBody(mailBody) {
  const startIndex = mailBody.indexOf("Monsieur,");
  const endIndex = mailBody.indexOf("Cordialement,");
  
  if (startIndex >= 0 && endIndex > startIndex) {
    return mailBody.substring(startIndex+10, endIndex).trim();
  } else {
    // fallback: return original body if pattern not found
    return mailBody;
  }
}

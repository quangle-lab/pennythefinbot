//x·ª≠ l√Ω c√°c th√¥ng b√°o t·ª´ banks
function processBankAlerts() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet();
  const threads = GmailApp.search('-is:starred');

  for (let thread of threads) {
    const messages = thread.getMessages();

    for (let message of messages) {    
      // Tr√≠ch xu·∫•t th√¥ng tin t·ª±a v√† n·ªôi dung t·ª´ email
      const body = message.getPlainBody();
      const subject = message.getSubject();    

      // G·ªçi OpenAI ƒë·ªÉ ph√¢n lo·∫°i th√¥ng minh tab, m·ª•c, s·ªë ti·ªÅn, n∆°i ph√°t sinh giao d·ªãch, ghi ch√∫, ghi c·ªßa ng√¢n h√†ng, ng√†y giao d·ªãch
      const aiResult = classifyTransactionWithOpenAI(subject, body);

      // Ki·ªÉm tra xem email c√≥ ph·∫£i l√† giao d·ªãch th·ª±c s·ª± kh√¥ng
      if (!isValidTransaction(aiResult, subject, body, message)) {
        Logger.log(`B·ªè qua email kh√¥ng ph·∫£i giao d·ªãch: ${subject}`);
        // ƒê√°nh d·∫•u ƒë√£ x·ª≠ l√Ω nh∆∞ng kh√¥ng th√™m v√†o sheet
        message.star();
        message.markRead();
        continue;
      }

      const groupTx = aiResult.group || 'üõí Chi ph√≠ bi·∫øn ƒë·ªïi';
      const typeTx = aiResult.type || 'Thu'
      const dateTx = aiResult.date || '';
      const descTx = aiResult.desc || '';
      const amountTx = aiResult.amount || '0';
      const locationTx = aiResult.location || 'N/A';
      const categoryTx = aiResult.category || 'Kh√°c';
      const bankcommentTx = aiResult.bankcomment || '';
      
      //ki·∫øm tra xem giao d·ªãch c√≥ t·ªìn t·∫°i ch∆∞a
      const tx = {
        date: dateTx,
        amount: amountTx,
        description: descTx,
        bankComment: bankcommentTx,
        category: categoryTx,
        group: groupTx, 
        type: typeTx,
        location: locationTx
      };

      const checkResult = checkAndConfirmTransaction(tx);
      if (checkResult.exists) {
        //g·ª≠i th√¥ng b√°o Telegram ƒë·ªÉ x√°c nh·∫≠n
        sendTelegramMessage (checkResult.message);
      } else {
        //th√™m m·ªõi giao d·ªãch
        const addResult = addConfirmedTransaction(groupTx, tx);      
        sendTelegramMessage (addResult.message);  
        if (!addResult.success) {
          sendTelegramMessage (addResult.error);
          continue;
        }
      }

      // ƒê√°nh d·∫•u ƒë√£ x·ª≠ l√Ω
      message.star();
      message.markRead();
    }
  }
}

//ki·ªÉm tra xem email c√≥ ph·∫£i l√† giao d·ªãch h·ª£p l·ªá kh√¥ng
function isValidTransaction(aiResult, subject, body, message = null) {
  // Ki·ªÉm tra c√°c d·∫•u hi·ªáu c·ªßa email spam ho·∫∑c kh√¥ng ph·∫£i giao d·ªãch

  // 1. Ki·ªÉm tra k·∫øt qu·∫£ AI c√≥ h·ª£p l·ªá kh√¥ng
  if (!aiResult || typeof aiResult !== 'object') {
    return false;
  }

  // 2. Ki·ªÉm tra c√°c tr∆∞·ªùng quan tr·ªçng c√≥ gi√° tr·ªã "N/A" ho·∫∑c r·ªóng
  const invalidValues = ['N/A', '', null, undefined, '0', '‚Ç¨0.00', '0.00'];

  // N·∫øu group l√† N/A th√¨ ch·∫Øc ch·∫Øn kh√¥ng ph·∫£i giao d·ªãch
  if (invalidValues.includes(aiResult.group)) {
    return false;
  }

  // N·∫øu amount l√† 0 ho·∫∑c N/A th√¨ c√≥ th·ªÉ kh√¥ng ph·∫£i giao d·ªãch th·ª±c
  if (invalidValues.includes(aiResult.amount)) {
    return false;
  }

  // 3. Ki·ªÉm tra subject c√≥ ch·ª©a t·ª´ kh√≥a spam
  const spamKeywords = [
    'script', 'error', 'l·ªói', 'th√¥ng b√°o l·ªói', 'notification error',
    'spam', 'advertisement', 'qu·∫£ng c√°o', 'khuy·∫øn m√£i', 'promotion',
    'newsletter', 'unsubscribe', 'marketing', 'survey', 'kh·∫£o s√°t'
  ];

  const subjectLower = subject.toLowerCase();
  for (const keyword of spamKeywords) {
    if (subjectLower.includes(keyword.toLowerCase())) {
      return false;
    }
  }

  // 4. Ki·ªÉm tra body c√≥ ch·ª©a n·ªôi dung giao d·ªãch th·ª±c s·ª±
  const transactionKeywords = [
    'giao d·ªãch', 'transaction', 'thanh to√°n', 'payment', 'chuy·ªÉn kho·∫£n', 'transfer',
    'r√∫t ti·ªÅn', 'withdrawal', 'n·∫°p ti·ªÅn', 'deposit', 's·ªë d∆∞', 'balance',
    'th·∫ª', 'card', 'atm', 'pos', 'internet banking', 'mobile banking'
  ];

  const bodyLower = body.toLowerCase();
  let hasTransactionKeyword = false;
  for (const keyword of transactionKeywords) {
    if (bodyLower.includes(keyword.toLowerCase())) {
      hasTransactionKeyword = true;
      break;
    }
  }

  // N·∫øu kh√¥ng c√≥ t·ª´ kh√≥a giao d·ªãch n√†o th√¨ c√≥ th·ªÉ kh√¥ng ph·∫£i email giao d·ªãch
  if (!hasTransactionKeyword) {
    return false;
  }

  // 5. Ki·ªÉm tra ƒë·ªãnh d·∫°ng s·ªë ti·ªÅn c√≥ h·ª£p l·ªá kh√¥ng
  if (aiResult.amount) {
    const amountStr = aiResult.amount.toString().replace(/[‚Ç¨\s,]/g, '');
    const amountNum = parseFloat(amountStr);

    // N·∫øu s·ªë ti·ªÅn <= 0 ho·∫∑c kh√¥ng ph·∫£i s·ªë th√¨ kh√¥ng h·ª£p l·ªá
    if (isNaN(amountNum) || amountNum <= 0) {
      return false;
    }

    // N·∫øu s·ªë ti·ªÅn qu√° l·ªõn (> 50,000 EUR) c√≥ th·ªÉ l√† spam
    if (amountNum > 50000) {
      return false;
    }
  }

  // 6. Ki·ªÉm tra ng√†y c√≥ h·ª£p l·ªá kh√¥ng
  if (aiResult.date) {
    try {
      const dateParts = aiResult.date.split('/');
      if (dateParts.length === 3) {
        const day = parseInt(dateParts[0]);
        const month = parseInt(dateParts[1]);
        const year = parseInt(dateParts[2]);

        // Ki·ªÉm tra ng√†y c√≥ h·ª£p l·ªá kh√¥ng
        if (day < 1 || day > 31 || month < 1 || month > 12 || year < 2020 || year > 2030) {
          return false;
        }
      }
    } catch (e) {
      // N·∫øu kh√¥ng parse ƒë∆∞·ª£c ng√†y th√¨ c√≥ th·ªÉ kh√¥ng h·ª£p l·ªá
      return false;
    }
  }

  // 7. Ki·ªÉm tra sender c√≥ ph·∫£i t·ª´ ng√¢n h√†ng kh√¥ng (optional)
  let sender = '';
  if (message && typeof message.getFrom === 'function') {
    try {
      sender = message.getFrom().toLowerCase();
    } catch (e) {
      sender = '';
    }
  }

  const bankDomains = [
    'techcombank', 'vietcombank', 'bidv', 'agribank', 'mbbank', 'acb',
    'sacombank', 'eximbank', 'hdbank', 'tpbank', 'vpbank', 'shb',
    'credit-agricole', 'bnpparibas', 'societegenerale', 'lcl'
  ];

  // N·∫øu c√≥ th√¥ng tin sender v√† kh√¥ng ph·∫£i t·ª´ ng√¢n h√†ng th√¨ c·∫ßn c·∫©n th·∫≠n h∆°n
  if (sender) {
    let isFromBank = false;
    for (const domain of bankDomains) {
      if (sender.includes(domain)) {
        isFromBank = true;
        break;
      }
    }

    // N·∫øu kh√¥ng ph·∫£i t·ª´ ng√¢n h√†ng v√† c√≥ nhi·ªÅu d·∫•u hi·ªáu spam th√¨ b·ªè qua
    if (!isFromBank && (
      invalidValues.includes(aiResult.category) ||
      invalidValues.includes(aiResult.desc) ||
      aiResult.desc === 'Th√¥ng b√°o l·ªói script Penny'
    )) {
      return false;
    }
  }

  // N·∫øu v∆∞·ª£t qua t·∫•t c·∫£ c√°c ki·ªÉm tra th√¨ coi l√† giao d·ªãch h·ª£p l·ªá
  return true;
}



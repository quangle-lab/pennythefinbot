//run all tests
function runAllTests() {
  console.log("üöÄ Starting Complete Test Suite");
  console.log("=" .repeat(60));

  const results = {
    searchTx: false,
    formatSearchResults: false,
    handleSearch: false,
    transactionIdOperations: false,
    handleAddTransaction: false,
    handleModifyTransaction: false,
    handleDeleteTransaction: false
  };

  try {
    // Search functionality tests
    console.log("\nüîç SEARCH FUNCTIONALITY TESTS");
    console.log("-" .repeat(40));
    results.searchTx = testSearchTx();
    results.formatSearchResults = testFormatSearchResults();
    results.handleSearch = testHandleSearch();

    // ID-based transaction operation tests
    console.log("\nüÜî ID-BASED TRANSACTION TESTS");
    console.log("-" .repeat(40));
    results.transactionIdOperations = testTransactionIdOperations();
    results.handleAddTransaction = testHandleAddTransaction();
    results.handleModifyTransaction = testHandleModifyTransaction();
    results.handleDeleteTransaction = testHandleDeleteTransaction();

    console.log("\n" + "=" .repeat(60));
    console.log("üìä COMPLETE TEST RESULTS SUMMARY");
    console.log("=" .repeat(60));

    Object.keys(results).forEach(testName => {
      const status = results[testName] ? "‚úÖ PASSED" : "‚ùå FAILED";
      console.log(`${testName}: ${status}`);
    });

    const allPassed = Object.values(results).every(result => result === true);
    console.log("\n" + (allPassed ? "üéâ ALL TESTS PASSED!" : "‚ö†Ô∏è SOME TESTS FAILED"));

    return allPassed;

  } catch (error) {
    console.error("‚ùå Critical error in test suite:", error);
    return false;
  }
}

//run only search functionality tests
function runAllSearchTests() {
  console.log("üöÄ Starting Search Functionality Tests");
  console.log("=" .repeat(50));

  const results = {
    searchTx: false,
    formatSearchResults: false,
    handleSearch: false
  };

  try {
    results.searchTx = testSearchTx();
    results.formatSearchResults = testFormatSearchResults();
    results.handleSearch = testHandleSearch();

    console.log("\n" + "=" .repeat(50));
    console.log("üìä SEARCH TEST RESULTS SUMMARY");
    console.log("=" .repeat(50));

    Object.keys(results).forEach(testName => {
      const status = results[testName] ? "‚úÖ PASSED" : "‚ùå FAILED";
      console.log(`${testName}: ${status}`);
    });

    const allPassed = Object.values(results).every(result => result === true);
    console.log("\n" + (allPassed ? "üéâ ALL SEARCH TESTS PASSED!" : "‚ö†Ô∏è SOME SEARCH TESTS FAILED"));

    return allPassed;

  } catch (error) {
    console.error("‚ùå Critical error in search test suite:", error);
    return false;
  }
}

//run only ID-based transaction tests
function runAllTransactionTests() {
  console.log("üöÄ Starting ID-based Transaction Tests");
  console.log("=" .repeat(50));

  const results = {
    transactionIdOperations: false,
    handleAddTransaction: false,
    handleModifyTransaction: false,
    handleDeleteTransaction: false
  };

  try {
    results.transactionIdOperations = testTransactionIdOperations();
    results.handleAddTransaction = testHandleAddTransaction();
    results.handleModifyTransaction = testHandleModifyTransaction();
    results.handleDeleteTransaction = testHandleDeleteTransaction();

    console.log("\n" + "=" .repeat(50));
    console.log("üìä TRANSACTION TEST RESULTS SUMMARY");
    console.log("=" .repeat(50));

    Object.keys(results).forEach(testName => {
      const status = results[testName] ? "‚úÖ PASSED" : "‚ùå FAILED";
      console.log(`${testName}: ${status}`);
    });

    const allPassed = Object.values(results).every(result => result === true);
    console.log("\n" + (allPassed ? "üéâ ALL TRANSACTION TESTS PASSED!" : "‚ö†Ô∏è SOME TRANSACTION TESTS FAILED"));

    return allPassed;

  } catch (error) {
    console.error("‚ùå Critical error in transaction test suite:", error);
    return false;
  }
}
//test functions for search functionality

//test data setup
function createTestData() {
  return {
    // Mock transaction data for different groups (now includes ID column)
    "üí∞Thu nh·∫≠p": [
      ["Ng√†y", "Mi√™u t·∫£", "S·ªë ti·ªÅn", "N∆°i", "M·ª•c", "Ghi ch√∫", "ID"],
      ["2024-11-01", "L∆∞∆°ng th√°ng 11", 3000, "C√¥ng ty", "L∆∞∆°ng", "Chuy·ªÉn kho·∫£n", "TX_1699123456_001"],
      ["2024-11-15", "Th∆∞·ªüng d·ª± √°n", 500, "C√¥ng ty", "Th∆∞·ªüng", "Bonus Q4", "TX_1699234567_002"],
      ["2024-10-01", "L∆∞∆°ng th√°ng 10", 3000, "C√¥ng ty", "L∆∞∆°ng", "Chuy·ªÉn kho·∫£n", "TX_1696123456_003"]
    ],
    "üõíChi ph√≠ bi·∫øn ƒë·ªïi": [
      ["Ng√†y", "Mi√™u t·∫£", "S·ªë ti·ªÅn", "N∆°i", "M·ª•c", "Ghi ch√∫", "ID"],
      ["2024-11-05", "ƒê·∫∑t ƒë·ªì ƒÉn UBER EATS", 25.50, "Nh√†", "ƒÇn u·ªëng", "Uber delivery", "TX_1699345678_004"],
      ["2024-11-10", "Mua s·∫Øm Carrefour", 85.30, "Carrefour", "Ch·ª£", "Groceries", "TX_1699456789_005"],
      ["2024-11-12", "Cafe v·ªõi b·∫°n", 12.00, "Starbucks", "ƒÇn u·ªëng", "Coffee meeting", "TX_1699567890_006"],
      ["2024-10-28", "Pizza ƒë√™m khuya", 18.50, "Dominos", "ƒÇn u·ªëng", "Late dinner", "TX_1698123456_007"],
      ["2024-11-20", "Uber taxi", 15.20, "Th√†nh ph·ªë", "Di chuy·ªÉn", "Uber ride", "TX_1699678901_008"]
    ],
    "üè†Chi ph√≠ c·ªë ƒë·ªãnh": [
      ["Ng√†y", "Mi√™u t·∫£", "S·ªë ti·ªÅn", "N∆°i", "M·ª•c", "Ghi ch√∫", "ID"],
      ["2024-11-01", "Ti·ªÅn thu√™ nh√†", 800, "Nh√†", "Thu√™ nh√†", "Monthly rent", "TX_1699789012_009"],
      ["2024-11-03", "H√≥a ƒë∆°n ƒëi·ªán", 65.40, "EDF", "ƒêi·ªán n∆∞·ªõc", "Electricity bill", "TX_1699890123_010"]
    ]
  };
}

//enhanced mock SpreadsheetApp with ID operations for transaction testing
function mockSpreadsheetAppWithIdOperations(testData) {
  const mockSheets = {};

  Object.keys(testData).forEach(sheetName => {
    // Create a copy of the data that can be modified
    let sheetData = JSON.parse(JSON.stringify(testData[sheetName]));

    mockSheets[sheetName] = {
      getDataRange: function() {
        return {
          getValues: function() {
            return sheetData;
          }
        };
      },
      getLastRow: function() {
        return sheetData.length;
      },
      appendRow: function(rowData) {
        sheetData.push(rowData);
        console.log(`üìù Mock: Added row to ${sheetName}:`, rowData);
      },
      getRange: function(row, col, numRows = 1, numCols = 1) {
        return {
          setValue: function(value) {
            if (sheetData[row - 1]) {
              sheetData[row - 1][col - 1] = value;
              console.log(`üìù Mock: Updated ${sheetName} row ${row}, col ${col} to:`, value);
            }
          },
          setValues: function(values) {
            for (let i = 0; i < numRows; i++) {
              for (let j = 0; j < numCols; j++) {
                if (sheetData[row - 1 + i]) {
                  sheetData[row - 1 + i][col - 1 + j] = values[i][j];
                }
              }
            }
            console.log(`üìù Mock: Updated ${sheetName} range starting at row ${row}, col ${col}:`, values);
          }
        };
      },
      deleteRow: function(rowNumber) {
        if (rowNumber > 0 && rowNumber < sheetData.length) {
          const deletedRow = sheetData.splice(rowNumber - 1, 1);
          console.log(`üóëÔ∏è Mock: Deleted row ${rowNumber} from ${sheetName}:`, deletedRow[0]);
        }
      }
    };
  });

  return {
    getActiveSpreadsheet: function() {
      return {
        getSheetByName: function(name) {
          return mockSheets[name] || null;
        }
      };
    },
    openById: function(id) {
      return {
        getSheetByName: function(name) {
          return mockSheets[name] || null;
        }
      };
    }
  };
}

//test searchTx function with various scenarios
function testSearchTx() {
  console.log("üß™ Testing searchTx function...");
  
  const testData = createTestData();
  const originalSpreadsheetApp = SpreadsheetApp;
  
  try {
    // Mock SpreadsheetApp
    SpreadsheetApp = mockSpreadsheetAppWithIdOperations(testData);
    
    // Test 1: Search all transactions (no filters)
    console.log("\nüìã Test 1: Search all transactions");
    const result1 = searchTx({});
    console.log(`‚úÖ Found ${result1.totalMatches} total transactions`);
    console.log(`‚úÖ Found ${result1.results.length} groups with transactions`);
    
    // Test 2: Search by date range
    console.log("\nüìÖ Test 2: Search by date range (November 2024)");
    const result2 = searchTx({
      startDate: "01/11/2024",
      endDate: "30/11/2024"
    });
    console.log(`‚úÖ Found ${result2.totalMatches} transactions in November 2024`);
    
    // Test 3: Search by keywords
    console.log("\nüîç Test 3: Search by keywords ('uber')");
    const result3 = searchTx({
      keywords: "uber"
    });
    console.log(`‚úÖ Found ${result3.totalMatches} transactions containing 'uber'`);
    
    // Test 4: Search by specific group
    console.log("\nüè∑Ô∏è Test 4: Search in specific group");
    const result4 = searchTx({
      groups: ["üõíChi ph√≠ bi·∫øn ƒë·ªïi"]
    });
    console.log(`‚úÖ Found ${result4.totalMatches} transactions in Chi ph√≠ bi·∫øn ƒë·ªïi`);
    
    // Test 5: Search by category
    console.log("\nüìÇ Test 5: Search by category ('ƒÇn u·ªëng')");
    const result5 = searchTx({
      categories: ["ƒÇn u·ªëng"]
    });
    console.log(`‚úÖ Found ${result5.totalMatches} transactions in ƒÇn u·ªëng category`);
    
    // Test 6: Combined filters
    console.log("\nüéØ Test 6: Combined filters (November + keywords + group)");
    const result6 = searchTx({
      startDate: "01/11/2024",
      endDate: "30/11/2024",
      keywords: "ƒÉn",
      groups: ["üõíChi ph√≠ bi·∫øn ƒë·ªïi"]
    });
    console.log(`‚úÖ Found ${result6.totalMatches} transactions with combined filters`);
    
    // Test 7: No results scenario
    console.log("\n‚ùå Test 7: Search with no results");
    const result7 = searchTx({
      keywords: "nonexistent"
    });
    console.log(`‚úÖ Found ${result7.totalMatches} transactions (should be 0)`);
    
    console.log("\n‚úÖ All searchTx tests completed successfully!");
    return true;
    
  } catch (error) {
    console.error("‚ùå Error in searchTx tests:", error);
    return false;
  } finally {
    // Restore original SpreadsheetApp
    SpreadsheetApp = originalSpreadsheetApp;
  }
}

//test formatSearchResults function
function testFormatSearchResults() {
  console.log("\nüß™ Testing formatSearchResults function...");
  
  try {
    // Test 1: Format results with data
    console.log("\nüìã Test 1: Format results with data");
    const mockSearchData = {
      success: true,
      totalMatches: 3,
      searchParams: {
        startDate: "01/11/2024",
        endDate: "30/11/2024",
        keywords: "uber"
      },
      results: [
        {
          groupName: "üõíChi ph√≠ bi·∫øn ƒë·ªïi",
          transactions: [
            {
              date: new Date("2024-11-05"),
              description: "ƒê·∫∑t ƒë·ªì ƒÉn UBER EATS",
              amount: 25.50,
              category: "ƒÇn u·ªëng"
            },
            {
              date: new Date("2024-11-20"),
              description: "Uber taxi",
              amount: 15.20,
              category: "Di chuy·ªÉn"
            }
          ]
        }
      ]
    };
    
    const formatted1 = formatSearchResults(mockSearchData);
    console.log("‚úÖ Formatted results with data:");
    console.log(formatted1.substring(0, 200) + "...");
    
    // Test 2: Format empty results
    console.log("\n‚ùå Test 2: Format empty results");
    const emptySearchData = {
      success: true,
      totalMatches: 0,
      searchParams: {},
      results: []
    };
    
    const formatted2 = formatSearchResults(emptySearchData);
    console.log("‚úÖ Formatted empty results:");
    console.log(formatted2);
    
    // Test 3: Format failed search
    console.log("\n‚ö†Ô∏è Test 3: Format failed search");
    const failedSearchData = {
      success: false,
      totalMatches: 0,
      searchParams: {},
      results: []
    };
    
    const formatted3 = formatSearchResults(failedSearchData);
    console.log("‚úÖ Formatted failed search:");
    console.log(formatted3);
    
    console.log("\n‚úÖ All formatSearchResults tests completed successfully!");
    return true;
    
  } catch (error) {
    console.error("‚ùå Error in formatSearchResults tests:", error);
    return false;
  }
}

//test handleSearch function
function testHandleSearch() {
  console.log("\nüß™ Testing handleSearch function...");
  
  const testData = createTestData();
  const originalSpreadsheetApp = SpreadsheetApp;
  
  // Mock sendTelegramMessage function
  const originalSendTelegramMessage = typeof sendTelegramMessage !== 'undefined' ? sendTelegramMessage : null;
  this.sendTelegramMessage = function(message) {
    console.log("üì± Mock Telegram message:", message);
  };
  
  try {
    // Mock SpreadsheetApp
    SpreadsheetApp = mockSpreadsheetAppWithIdOperations(testData);
    
    // Test 1: Valid search intent
    console.log("\n‚úÖ Test 1: Valid search intent");
    const intentObj1 = {
      startDate: "01/11/2024",
      endDate: "30/11/2024",
      groups: ["üõíChi ph√≠ bi·∫øn ƒë·ªïi"],
      categories: ["ƒÇn u·ªëng"],
      keywords: "uber",
      confirmation: "üîç ƒêang t√¨m ki·∫øm giao d·ªãch..."
    };
    
    const result1 = handleSearch(intentObj1);
    console.log(`‚úÖ Search result success: ${result1.success}`);
    console.log(`‚úÖ Messages count: ${result1.messages.length}`);
    console.log(`‚úÖ Logs count: ${result1.logs.length}`);
    
    // Test 2: Search with minimal parameters
    console.log("\nüìã Test 2: Search with minimal parameters");
    const intentObj2 = {
      keywords: "l∆∞∆°ng",
      confirmation: "üîç T√¨m ki·∫øm giao d·ªãch l∆∞∆°ng..."
    };
    
    const result2 = handleSearch(intentObj2);
    console.log(`‚úÖ Minimal search success: ${result2.success}`);
    
    console.log("\n‚úÖ All handleSearch tests completed successfully!");
    return true;
    
  } catch (error) {
    console.error("‚ùå Error in handleSearch tests:", error);
    return false;
  } finally {
    // Restore original functions
    SpreadsheetApp = originalSpreadsheetApp;
    if (originalSendTelegramMessage) {
      this.sendTelegramMessage = originalSendTelegramMessage;
    }
  }
}

//test ID-based transaction operations
function testTransactionIdOperations() {
  console.log("\nüß™ Testing ID-based Transaction Operations...");

  const testData = createTestData();
  const originalSpreadsheetApp = SpreadsheetApp;

  try {
    // Mock SpreadsheetApp with extended functionality for ID operations
    SpreadsheetApp = mockSpreadsheetAppWithIdOperations(testData);

    // Test 1: Generate Transaction ID
    console.log("\nüÜî Test 1: Generate Transaction ID");
    const newId = generateTransactionId();
    console.log(`‚úÖ Generated ID: ${newId}`);
    console.log(`‚úÖ ID format valid: ${newId.startsWith('TX_')}`);

    // Test 2: Find Transaction by ID
    console.log("\nüîç Test 2: Find Transaction by ID");
    const findResult = findTransactionRowById("üõíChi ph√≠ bi·∫øn ƒë·ªïi", "TX_1699345678_004");
    console.log(`‚úÖ Find result success: ${findResult.success}`);
    if (findResult.success) {
      console.log(`‚úÖ Found transaction: ${findResult.rowData.description}`);
      console.log(`‚úÖ Row number: ${findResult.rowNumber}`);
    }

    // Test 3: Find non-existent transaction
    console.log("\n‚ùå Test 3: Find non-existent transaction");
    const findResult2 = findTransactionRowById("üõíChi ph√≠ bi·∫øn ƒë·ªïi", "TX_NONEXISTENT");
    console.log(`‚úÖ Non-existent find failed as expected: ${!findResult2.success}`);

    // Test 4: Update Transaction by ID
    console.log("\n‚úèÔ∏è Test 4: Update Transaction by ID");
    const updateResult = updateTransactionById("üõíChi ph√≠ bi·∫øn ƒë·ªïi", "TX_1699345678_004", {
      description: "ƒê·∫∑t ƒë·ªì ƒÉn UBER EATS (Updated)",
      amount: 30.00
    });
    console.log(`‚úÖ Update result success: ${updateResult.success}`);
    if (updateResult.success) {
      console.log(`‚úÖ Updated transaction ID: ${updateResult.transactionId}`);
    }

    // Test 5: Delete Transaction by ID
    console.log("\nüóëÔ∏è Test 5: Delete Transaction by ID");
    const deleteResult = deleteTransactionById("üõíChi ph√≠ bi·∫øn ƒë·ªïi", "TX_1699567890_006");
    console.log(`‚úÖ Delete result success: ${deleteResult.success}`);
    if (deleteResult.success) {
      console.log(`‚úÖ Deleted transaction: ${deleteResult.deletedTransaction.description}`);
    }

    console.log("\n‚úÖ All ID-based transaction operation tests completed!");
    return true;

  } catch (error) {
    console.error("‚ùå Error in ID-based transaction tests:", error);
    return false;
  } finally {
    // Restore original SpreadsheetApp
    SpreadsheetApp = originalSpreadsheetApp;
  }
}

//test handleAddTransaction with ID generation
function testHandleAddTransaction() {
  console.log("\nüß™ Testing handleAddTransaction with ID generation...");

  const testData = createTestData();
  const originalSpreadsheetApp = SpreadsheetApp;
  const originalSendTelegramMessage = typeof sendTelegramMessage !== 'undefined' ? sendTelegramMessage : null;

  // Mock functions
  this.sendTelegramMessage = function(message) {
    console.log("üì± Mock Telegram message:", message);
  };

  try {
    // Mock SpreadsheetApp
    SpreadsheetApp = mockSpreadsheetAppWithIdOperations(testData);

    // Test 1: Add new transaction
    console.log("\n‚ûï Test 1: Add new transaction");
    const intentObj1 = {
      tab: "üõíChi ph√≠ bi·∫øn ƒë·ªïi",
      date: "25/11/2024",
      desc: "Test transaction",
      amount: "‚Ç¨15.50",
      location: "Test location",
      category: "Test category",
      comment: "Test comment",
      confirmation: "ƒê√£ th√™m giao d·ªãch test"
    };

    const result1 = handleAddTransaction(intentObj1);
    console.log(`‚úÖ Add transaction success: ${result1.success}`);
    console.log(`‚úÖ Messages count: ${result1.messages.length}`);
    console.log(`‚úÖ Message contains ID: ${result1.messages[0].includes('ID:')}`);

    // Test 2: Add transaction to non-existent sheet
    console.log("\n‚ùå Test 2: Add transaction to non-existent sheet");
    const intentObj2 = {
      tab: "NonExistentSheet",
      desc: "Test transaction",
      amount: "‚Ç¨10.00",
      confirmation: "Test confirmation"
    };

    const result2 = handleAddTransaction(intentObj2);
    console.log(`‚úÖ Non-existent sheet failed as expected: ${!result2.success}`);

    console.log("\n‚úÖ All handleAddTransaction tests completed!");
    return true;

  } catch (error) {
    console.error("‚ùå Error in handleAddTransaction tests:", error);
    return false;
  } finally {
    // Restore original functions
    SpreadsheetApp = originalSpreadsheetApp;
    if (originalSendTelegramMessage) {
      this.sendTelegramMessage = originalSendTelegramMessage;
    }
  }
}

//test handleModifyTransaction with ID-based operations
function testHandleModifyTransaction() {
  console.log("\nüß™ Testing handleModifyTransaction with ID-based operations...");

  const testData = createTestData();
  const originalSpreadsheetApp = SpreadsheetApp;
  const originalSendTelegramMessage = typeof sendTelegramMessage !== 'undefined' ? sendTelegramMessage : null;

  // Mock functions
  this.sendTelegramMessage = function(message) {
    console.log("üì± Mock Telegram message:", message);
  };

  try {
    // Mock SpreadsheetApp
    SpreadsheetApp = mockSpreadsheetAppWithIdOperations(testData);

    // Test 1: Modify transaction in same sheet
    console.log("\n‚úèÔ∏è Test 1: Modify transaction in same sheet");
    const intentObj1 = {
      tab: "üõíChi ph√≠ bi·∫øn ƒë·ªïi",
      transactionId: "TX_1699345678_004",
      desc: "Updated UBER EATS order",
      amount: "‚Ç¨28.00",
      category: "ƒÇn u·ªëng",
      confirmation: "ƒê√£ c·∫≠p nh·∫≠t giao d·ªãch UBER EATS"
    };

    const result1 = handleModifyTransaction(intentObj1, "original text", "reply text");
    console.log(`‚úÖ Modify transaction success: ${result1.success}`);
    console.log(`‚úÖ Message contains ID: ${result1.messages.includes('ID:')}`);

    // Test 2: Move transaction to different sheet
    console.log("\nüîÑ Test 2: Move transaction to different sheet");
    const intentObj2 = {
      tab: "üõíChi ph√≠ bi·∫øn ƒë·ªïi",
      newtab: "üè†Chi ph√≠ c·ªë ƒë·ªãnh",
      transactionId: "TX_1699456789_005",
      category: "Thu√™ nh√†",
      confirmation: "ƒê√£ chuy·ªÉn giao d·ªãch sang chi ph√≠ c·ªë ƒë·ªãnh"
    };

    const result2 = handleModifyTransaction(intentObj2, "original text", "reply text");
    console.log(`‚úÖ Move transaction success: ${result2.success}`);
    console.log(`‚úÖ Message contains new ID: ${result2.messages.includes('ID m·ªõi:')}`);

    // Test 3: Modify with missing transaction ID
    console.log("\n‚ùå Test 3: Modify with missing transaction ID");
    const intentObj3 = {
      tab: "üõíChi ph√≠ bi·∫øn ƒë·ªïi",
      desc: "Updated description",
      confirmation: "Test confirmation"
    };

    const result3 = handleModifyTransaction(intentObj3, "original text", "reply text");
    console.log(`‚úÖ Missing ID failed as expected: ${!result3.success}`);

    // Test 4: Modify non-existent transaction
    console.log("\n‚ùå Test 4: Modify non-existent transaction");
    const intentObj4 = {
      tab: "üõíChi ph√≠ bi·∫øn ƒë·ªïi",
      transactionId: "TX_NONEXISTENT",
      desc: "Updated description",
      confirmation: "Test confirmation"
    };

    const result4 = handleModifyTransaction(intentObj4, "original text", "reply text");
    console.log(`‚úÖ Non-existent transaction failed as expected: ${!result4.success}`);

    console.log("\n‚úÖ All handleModifyTransaction tests completed!");
    return true;

  } catch (error) {
    console.error("‚ùå Error in handleModifyTransaction tests:", error);
    return false;
  } finally {
    // Restore original functions
    SpreadsheetApp = originalSpreadsheetApp;
    if (originalSendTelegramMessage) {
      this.sendTelegramMessage = originalSendTelegramMessage;
    }
  }
}

//test handleDeleteTransaction with ID-based operations
function testHandleDeleteTransaction() {
  console.log("\nüß™ Testing handleDeleteTransaction with ID-based operations...");

  const testData = createTestData();
  const originalSpreadsheetApp = SpreadsheetApp;
  const originalSendTelegramMessage = typeof sendTelegramMessage !== 'undefined' ? sendTelegramMessage : null;

  // Mock functions
  this.sendTelegramMessage = function(message) {
    console.log("üì± Mock Telegram message:", message);
  };

  try {
    // Mock SpreadsheetApp
    SpreadsheetApp = mockSpreadsheetAppWithIdOperations(testData);

    // Test 1: Delete existing transaction
    console.log("\nüóëÔ∏è Test 1: Delete existing transaction");
    const intentObj1 = {
      tab: "üõíChi ph√≠ bi·∫øn ƒë·ªïi",
      transactionId: "TX_1699678901_008",
      confirmation: "ƒê√£ x√≥a giao d·ªãch Uber taxi"
    };

    const result1 = handleDeleteTransaction(intentObj1);
    console.log(`‚úÖ Delete transaction success: ${result1.success}`);
    console.log(`‚úÖ Message contains ID: ${result1.messages[0].includes('TX_')}`);

    // Test 2: Delete with missing transaction ID
    console.log("\n‚ùå Test 2: Delete with missing transaction ID");
    const intentObj2 = {
      tab: "üõíChi ph√≠ bi·∫øn ƒë·ªïi",
      confirmation: "Test confirmation"
    };

    const result2 = handleDeleteTransaction(intentObj2);
    console.log(`‚úÖ Missing ID failed as expected: ${!result2.success}`);

    // Test 3: Delete non-existent transaction
    console.log("\n‚ùå Test 3: Delete non-existent transaction");
    const intentObj3 = {
      tab: "üõíChi ph√≠ bi·∫øn ƒë·ªïi",
      transactionId: "TX_NONEXISTENT",
      confirmation: "Test confirmation"
    };

    const result3 = handleDeleteTransaction(intentObj3);
    console.log(`‚úÖ Non-existent transaction failed as expected: ${!result3.success}`);

    console.log("\n‚úÖ All handleDeleteTransaction tests completed!");
    return true;

  } catch (error) {
    console.error("‚ùå Error in handleDeleteTransaction tests:", error);
    return false;
  } finally {
    // Restore original functions
    SpreadsheetApp = originalSpreadsheetApp;
    if (originalSendTelegramMessage) {
      this.sendTelegramMessage = originalSendTelegramMessage;
    }
  }
}

//individual test runner functions for manual testing

// Search functionality tests
function testSearchOnly() {
  return testSearchTx();
}

function testFormatOnly() {
  return testFormatSearchResults();
}

function testHandleSearchOnly() {
  return testHandleSearch();
}

// ID-based transaction operation tests
function testIdOperationsOnly() {
  return testTransactionIdOperations();
}

function testAddTransactionOnly() {
  return testHandleAddTransaction();
}

function testModifyTransactionOnly() {
  return testHandleModifyTransaction();
}

function testDeleteTransactionOnly() {
  return testHandleDeleteTransaction();
}

// Group test runners
function testSearchFunctionalityOnly() {
  return runAllSearchTests();
}

function testTransactionFunctionalityOnly() {
  return runAllTransactionTests();
}

//qu·∫£n l√Ω v√† l·∫•y d·ªØ li·ªáu t·ª´ sheets d∆∞·ªõi d·∫°ng text


//---------------BUDGET-------------------//
//t·∫°o budget c√≥ ch·ªçn l·ªçc - ch·ªâ t·∫°o c√°c d√≤ng ch∆∞a t·ªìn t·∫°i
function createBudgetSelectively(newMonthText, sourceMonthText) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("üí∂D·ª± to√°n");
  if (!sheet) {
    return {
      error: "‚ùå Kh√¥ng t√¨m th·∫•y sheet 'üí∂D·ª± to√°n'"
    };
  }

  const data = sheet.getDataRange().getValues();
  const timezone = Session.getScriptTimeZone();

  // Step 1: Check existing budget lines for the new month
  const existingBudgetLines = [];
  const existingCategories = new Set();

  data.forEach((row, index) => {
    if (index === 0) return; // Skip header

    const rowMonthText = Utilities.formatDate(row[0], timezone, "MM/yyyy");
    const group = row[1];
    const category = row[2];
    const amount = row[3];
    const note = row[4];

    if (rowMonthText === newMonthText) {
      existingBudgetLines.push({
        group: group,
        category: category,
        amount: amount,
        note: note || ''
      });
      existingCategories.add(category);
    }
  });

  // Step 2: Get source month data and filter out existing categories
  const sourceMonthItems = [];
  const newItemsToCreate = [];

  data.forEach((row, index) => {
    if (index === 0) return; // Skip header

    const rowMonthText = Utilities.formatDate(row[0], timezone, "MM/yyyy");
    const group = row[1];
    const category = row[2];
    const amount = row[3];
    const note = row[4];

    if (rowMonthText === sourceMonthText) {
      sourceMonthItems.push({
        group: group,
        category: category,
        amount: amount,
        note: note || ''
      });

      // Only add to creation list if category doesn't exist in new month
      if (!existingCategories.has(category)) {
        newItemsToCreate.push({
          group: group,
          category: category,
          amount: Math.round(amount*100)/100,  
          note: ''
        });
      }
    }
  });

  // Check if source month has data
  if (sourceMonthItems.length === 0) {
    return {
      error: `‚ùå Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu d·ª± to√°n cho th√°ng ngu·ªìn *${sourceMonthText}*`
    };
  }

  // Step 3: Create new budget lines (skip existing ones)
  let createdCount = 0;
  if (newItemsToCreate.length > 0) {
    const newRows = [];
    newItemsToCreate.forEach(item => {
      const newRow = [newMonthText, item.group, item.category, item.amount, item.note];
      newRows.push(newRow);
    });

    if (newRows.length > 0) {
      sheet.getRange(sheet.getLastRow() + 1, 1, newRows.length, newRows[0].length).setValues(newRows);
      createdCount = newRows.length;
    }
  }

  // Step 4: Generate summary message
  let summary = `‚úÖ **T·∫°o d·ª± to√°n th√°ng ${newMonthText}:**\n\n`;

  if (createdCount > 0) {
    summary += `‚ûï ƒê√£ t·∫°o ${createdCount} d·ª± to√°n m·ªõi t·ª´ th√°ng ${sourceMonthText}\n`;

    // Group new items by category for display
    const groupedNewItems = {};
    newItemsToCreate.forEach(item => {
      if (!groupedNewItems[item.group]) groupedNewItems[item.group] = [];
      groupedNewItems[item.group].push(`  ‚Ä¢ ${item.category}: ‚Ç¨${item.amount}`);
    });

    Object.keys(groupedNewItems).forEach(group => {
      summary += `\n**${group}:**\n${groupedNewItems[group].join('\n')}`;
    });
  } else {
    summary += `‚ÑπÔ∏è Kh√¥ng c√≥ d·ª± to√°n m·ªõi n√†o ƒë∆∞·ª£c t·∫°o (t·∫•t c·∫£ ƒë√£ t·ªìn t·∫°i)`;
  }

  if (existingBudgetLines.length > 0) {
    summary += `\n\n‚ö†Ô∏è ƒê√£ b·ªè qua ${existingBudgetLines.length} d·ª± to√°n ƒë√£ t·ªìn t·∫°i`;
  }

  return {
    success: true,
    summary: summary,
    existingLines: existingBudgetLines,
    createdCount: createdCount,
    skippedCount: existingBudgetLines.length,
    newMonthText: newMonthText,
    sourceMonthText: sourceMonthText
  };
}

//thay ƒë·ªïi budget
function setBudgetChange(month, group, category, amount, note) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('üí∂D·ª± to√°n');
  if (!sheet) {
    Logger.log("Sheet 'üí∂D·ª± to√°n' not found.");
    return "‚ùå Kh√¥ng t√¨m th·∫•y sheet 'üí∂D·ª± to√°n'";
  }

  const data = sheet.getDataRange().getValues();
  const timezone = Session.getScriptTimeZone();

  for (let i = 1; i < data.length; i++) { // Skip header row
    const row = data[i];
    const dateCell = row[0];
    const groupCell = row[1];
    const categoryCell = row[2];

    const rowMonth = Utilities.formatDate(new Date(dateCell), timezone, "MM/yyyy");

    if (rowMonth === month && groupCell === group && categoryCell === category) {
      sheet.getRange(i + 1, 4).setValue(amount);  // Column D = amount
      sheet.getRange(i + 1, 5).setValue(note);    // Column E = ghi ch√∫
      return `‚úÖ ƒê√£ c·∫≠p nh·∫≠t d·ª± to√°n th√°ng ${rowMonth} cho *${category}* (${group}): ‚Ç¨${amount}`; // Stop after first match
    }
  }

  // N·∫øu ch∆∞a c√≥, th√™m m·ªõi  
  sheet.appendRow([month, group, category, amount, note]);
  return `‚ûï ƒê√£ th√™m d·ª± to√°n th√°ng ${month} cho *${category}* (${group}): ‚Ç¨${amount}`;
}

//l·∫•y d·ªØ li·ªáu d·ª± to√°n cho th√°ng monthText (MM/yyyy)
function getBudgetData (monthText) {  
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("üí∂D·ª± to√°n");
  const data = sheet.getDataRange().getValues();

  const timezone = Session.getScriptTimeZone();

  const monthRows = data.filter((row,index) => {
    if (index === 0) return;
    const date = row[0]; // Gi·∫£ s·ª≠ c·ªôt A l√† ng√†y th√°ng
    const formatted = Utilities.formatDate(new Date(date), timezone, "MM/yyyy");
    return formatted === monthText;
  });

  const summary = {};
  monthRows.forEach(row => {
    const tab = row[1];
    const category = row[2];
    const budget = row[3];
    if (!summary[tab]) summary[tab] = [];
    summary[tab].push(`- ${category}: ‚Ç¨${budget.toFixed(2)}`);
  });

  let monthBudgetData = `D·ª± to√°n c·ªßa th√°ng *${monthText}*\n============`;
  for (const tab in summary) {
    monthBudgetData += `\n\n*${tab}*\n${summary[tab].join("\n")}`;
  }

  return monthBudgetData;
}

//---------------SPENDING-------------------//
//l·∫•y d·ªØ li·ªáu dashboard cho th√°ng monthText (MM/yyyy)
function getDashboardData (monthText) {  

  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const dashboard = ss.getSheetByName("üõ§Ô∏è Dashboard");

  let firstofMonthText = "01/" + monthText

  // 1. Ghi th√°ng v√†o √¥ A1 ƒë·ªÉ c√°c s·ªë li·ªáu c·∫≠p nh·∫≠t
  dashboard.getRange("A1").setValue(firstofMonthText);

  // 2. C√°c named range c·∫ßn l·∫•y d·ªØ li·ªáu
  const rangeNames = [
    "thongke_ThuNhap",
    "thongke_ChiPhiCoDinh",
    "thongke_ChiPhiBienDoi",    
    "thongke_QuyGiaDinh",
    "thongke_QuyMucDich",
    "thongke_TietKiem"
  ];

  const dataSections = [];

  rangeNames.forEach(name => {
    const range = ss.getRangeByName(name);
    if (!range) return;

    const values = range.getValues();
    const label = name.replace("thongke_", "").replace(/([A-Z])/g, ' $1').trim();

    let section = `üìä ${label}:\n`;

    values.forEach(([muc, dudoan, thucte, chenhlech], index) => {
      if (index===0) return;      
      if (muc!==null && muc!=="" && dudoan!==null && thucte!==null && chenhlech!==null) {
        if (index >1) {
          dudoan = Math.round(dudoan * 100) / 100;
          thucte = Math.round(thucte * 100) / 100;
          chenhlech = Math.round(chenhlech * 100) / 100;
        }
        section += `- ${muc}|${dudoan}|${thucte}|${chenhlech}\n`;
      }
    });

    dataSections.push(section.trim());
  });

  //Tr·∫£ l·∫°i A1 v·ªÅ ng√†y 1 c·ªßa th√°ng hi·ªán t·∫°i
  const today = new Date();
  const firstOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);
  dashboard.getRange("A1").setValue(Utilities.formatDate(firstOfMonth, ss.getSpreadsheetTimeZone(), "dd/MM/yyyy"));

  const monthDashboardData = `
  T·ªïng h·ª£p giao d·ªãch th√°ng ${monthText}\n
  Cho m·ªói m·ª•c, c√°c s·ªë li·ªáu ƒë∆∞·ª£c li·ªát k√™ trong 4 c·ªôt l√† M·ª•c, D·ª± ƒëo√°n, Th·ª±c T·∫ø, Ch√™nh l·ªách. 
    - ƒê·ªëi v·ªõi c√°c giao d·ªãch chi, 
        - s·ªë ch√™nh l·ªách √¢m nghƒ©a l√† chi nhi·ªÅu h∆°n d·ª± t√≠nh - x·∫•u
        - d∆∞∆°ng nghƒ©a l√† chi √≠t h∆°n d·ª± t√≠nh - t·ªët
    - ƒê·ªëi v·ªõi c√°c m·ª•c Thu trong c√°c Qu·ªπ, L∆∞∆°ng v√† Thu nh·∫≠p kh√°c nh√≥m ph·∫ßn Thu Nh·∫≠p, c√°c m·ª•c chi cho Qu·ªπ Gia ƒê√¨nh, Qu·ªπ M·ª•c ƒê√≠ch v√† Ti·∫øt Ki·ªám trong Chi ph√≠ c·ªë ƒë·ªãnh
        - s·ªë ch√™nh l·ªách √¢m nghƒ©a l√† thu √≠t h∆°n d·ª± t√≠nh - x·∫•u
        - d∆∞∆°ng nghƒ©a l√† thu nhi·ªÅu h∆°n d·ª± t√≠nh - t·ªët
    ${dataSections.join("\n\n")}
  `;  
  return monthDashboardData;
}

//l·∫•y d·ªØ li·ªáu chi ti√™u c·ªßa th√°ng monthText theo type -- c·ªë ƒë·ªãnh (fix) ho·∫∑c bi·∫øn ƒë·ªïi (var)
function getExpenseTx (monthText, type) {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const dashboard = ss.getSheetByName("üõ§Ô∏è Dashboard");

  let firstofMonthText = "01/" + monthText

  // 1. Ghi th√°ng v√†o √¥ A1 ƒë·ªÉ c√°c s·ªë li·ªáu c·∫≠p nh·∫≠t
  dashboard.getRange("A1").setValue(firstofMonthText);

  // 2. C√°c named range c·∫ßn l·∫•y d·ªØ li·ªáu
  const rangeNames = [
    "thongke_ThuNhap",
    "thongke_ChiPhiCoDinh",
    "thongke_ChiPhiBienDoi",    
    "thongke_QuyGiaDinh",
    "thongke_QuyMucDich",
    "thongke_TietKiem"
  ];
}

//ki·ªÉm tra giao d·ªãch ƒë√£ t·ªìn t·∫°i v√† x·ª≠ l√Ω x√°c nh·∫≠n th√™m m·ªõi
function checkAndConfirmTransaction(transaction) {
  const { date, amount, description, bankComment, category, group } = transaction;

  // Validate input parameters
  if (!date || !amount || !description || !group) {
    return {
      exists: false,
      needsConfirmation: false,
      error: "‚ùå Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc: date, amount, description, group"
    };
  }

  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName(group);

  if (!sheet) {
    return {
      exists: false,
      needsConfirmation: false,
      error: `‚ùå Kh√¥ng t√¨m th·∫•y sheet "${group}"`
    };
  }

  // Get all data from the sheet
  const data = sheet.getDataRange().getValues();
  const timezone = Session.getScriptTimeZone();

  // Parse input date for comparison
  let inputDate;
  try {
    // Handle different date formats
    if (typeof date === 'string') {
      const dateParts = date.split('/');
      if (dateParts.length === 3) {
        // DD/MM/YYYY format
        inputDate = new Date(`${dateParts[2]}-${dateParts[1]}-${dateParts[0]}`);
      } else {
        inputDate = new Date(date);
      }
    } else {
      inputDate = new Date(date);
    }
  } catch (e) {
    return {
      exists: false,
      needsConfirmation: false,
      error: `‚ùå ƒê·ªãnh d·∫°ng ng√†y kh√¥ng h·ª£p l·ªá: ${date}`
    };
  }

  // Check for existing transactions (skip header row)
  const existingRows = [];
  for (let i = 1; i < data.length; i++) {
    const row = data[i];
    const rowDate = row[0]; // Column A: Date
    const rowDesc = row[1]; // Column B: Description
    const rowAmount = row[2]; // Column C: Amount
    const rowLocation = row[3]; // Column D: Location
    const rowCategory = row[4]; // Column E: Category
    const rowBankComment = row[5]; // Column F: Bank Comment

    // Compare dates
    let rowDateFormatted;
    try {
      rowDateFormatted = Utilities.formatDate(new Date(rowDate), timezone, "dd/MM/yyyy");
      const inputDateFormatted = Utilities.formatDate(inputDate, timezone, "dd/MM/yyyy");

      // Check for potential duplicates based on multiple criteria
      const dateMatch = rowDateFormatted === inputDateFormatted;
      const amountMatch = Math.abs(parseFloat(rowAmount) - parseFloat(amount)) < 0.01; // Allow small floating point differences
      const descMatch = rowDesc && description &&
        (rowDesc.toLowerCase().includes(description.toLowerCase()) ||
         description.toLowerCase().includes(rowDesc.toLowerCase()));
      const bankCommentMatch = bankComment && rowBankComment &&
        (rowBankComment.toLowerCase().includes(bankComment.toLowerCase()) ||
         bankComment.toLowerCase().includes(rowBankComment.toLowerCase()));

      // Consider it a potential duplicate if:
      // 1. Same date AND same amount, OR
      // 2. Same date AND similar description, OR
      // 3. Same amount AND same bank comment (if available)
      if ((dateMatch && amountMatch) ||
          (dateMatch && descMatch) ||
          (amountMatch && bankCommentMatch)) {
        existingRows.push({
          rowNumber: i + 1,
          date: rowDateFormatted,
          description: rowDesc,
          amount: rowAmount,
          location: rowLocation,
          category: rowCategory,
          bankComment: rowBankComment
        });
      }
    } catch (e) {
      // Skip rows with invalid dates
      continue;
    }
  }

  // Return results
  if (existingRows.length > 0) {
    let message = `üîç T√¨m th·∫•y *${existingRows.length}* giao d·ªãch t∆∞∆°ng t·ª± trong *${group}*:\n\n`;
    existingRows.forEach((row, index) => {
      message += `- *D√≤ng ${row.rowNumber}*: ${row.date} - ${row.description} - ‚Ç¨${row.amount} - ${row.category}\n`;
    });
    message += `\n*üìùGiao d·ªãch m·ªõi*: ${Utilities.formatDate(inputDate, timezone, "dd/MM/yyyy")} - ${description} - ${amount} - ${category || 'N/A'}\n\n`;
    message += `‚ùìB·∫°n c√≥ mu·ªën th√™m giao d·ªãch n√†y kh√¥ng?`;

    return {
      exists: true,
      needsConfirmation: true,
      existingRows: existingRows,
      message: message,
      group: group,
      newTransaction: {
        date: inputDate,
        description: description,
        amount: amount,
        location: transaction.location || 'N/A',
        category: category || 'Kh√°c',
        bankComment: bankComment || ''
      }
    };
  } else {
    return {
      exists: false,
      needsConfirmation: true,
      message: `üîç Kh√¥ng t√¨m th·∫•y giao d·ªãch t∆∞∆°ng t·ª± trong "${group}".\n`,
      group: group,
      newTransaction: {
        date: inputDate,
        description: description,
        amount: amount,
        location: transaction.location || 'N/A',
        category: category || 'Kh√°c',
        bankComment: bankComment || ''
      }
    };
  }
}

//th√™m giao d·ªãch sau khi ƒë√£ x√°c nh·∫≠n
function addConfirmedTransaction(sheetName, transactionData) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(sheetName);

    if (!sheet) {
      return {
        success: false,
        error: `‚ùå Kh√¥ng t√¨m th·∫•y sheet "${sheetName}"`
      };
    }

    const { type, date, description, amount, location, category, bankComment } = transactionData;

    // Add the transaction to the sheet
    const lastRow = sheet.getLastRow();
    sheet.appendRow([
      date,
      description,
      amount,
      location,
      category,
      bankComment
    ]);

    const newRowNumber = lastRow + 1;    

    return {
      success: true,
      message: `${type} *${amount}* cho *${description}*\n ‚úèÔ∏è_Ghi v√†o ${sheetName}, m·ª•c ${category}, d√≤ng ${newRowNumber}_`,
      rowNumber: newRowNumber,
      sheetName: sheetName
    };

  } catch (error) {
    return {
      success: false,
      error: `‚ùå L·ªói khi th√™m giao d·ªãch: ${error.toString()}`
    };
  }
}


//---------------FUNDS-------------------//
//l·∫•y s·ªë d∆∞ hi·ªán t·∫°i c·ªßa Qu·ªπ -- gia ƒë√¨nh (rainy), m·ª•c ƒë√≠ch (target) ho·∫∑c ti·∫øt ki·ªám (saving)
function getFundBalances(type) {
  const ss = SpreadsheetApp.getActiveSpreadsheet();  

  // Map type to named range
  const typeToRangeMap = {
    "rainy": "sodu_QuyGiaDinh",
    "target": "sodu_QuyMucDich",
    "saving": "sodu_Tietkiem",
    "all": ["sodu_QuyGiaDinh", "sodu_QuyMucDich", "sodu_Tietkiem"]
  };

  // If specific type is requested
  if (type && type !== "all") {
    const rangeName = typeToRangeMap[type];
    if (!rangeName) {
      return {
        success: false,
        error: `‚ùå Lo·∫°i qu·ªπ kh√¥ng h·ª£p l·ªá: "${type}". C√°c lo·∫°i c√≥ s·∫µn: rainy, target, saving, all`
      };
    }

    try {
      const namedRange = ss.getRangeByName(rangeName);
      if (!namedRange) {
        return {
          success: false,
          error: `‚ùå Kh√¥ng t√¨m th·∫•y named range: "${rangeName}"`
        };
      }

      const values = namedRange.getValues();
      const balances = {};
      let totalBalance = 0;

      values.forEach(([name, amount]) => {
        if (name && amount != null) {
          const numericAmount = parseFloat(amount) || 0;
          balances[name] = Math.round(numericAmount*100)/100;
          totalBalance += Math.round(numericAmount*100)/100;
        }
      });

      return {
        success: true,
        type: type,
        balances: balances,
        total: totalBalance,
        rangeName: rangeName
      };

    } catch (error) {
      return {
        success: false,
        error: `‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ "${rangeName}": ${error.toString()}`
      };
    }
  }

  // If "all" or no type specified, get all fund balances
  try {
    const allBalances = {};
    let grandTotal = 0;
    const rangeNames = typeToRangeMap.all;

    for (const rangeName of rangeNames) {
      const namedRange = ss.getRangeByName(rangeName);
      if (!namedRange) {
        console.warn(`Named range not found: ${rangeName}`);
        continue;
      }

      const values = namedRange.getValues();
      const fundBalances = {};
      let fundTotal = 0;

      values.forEach(([name, amount]) => {
        if (name && amount != null) {
          const numericAmount = parseFloat(amount) || 0;
          fundBalances[name] = Math.round(numericAmount*100)/100;
          fundTotal += Math.round(numericAmount*100)/100;
        }
      });

      // Map range name back to fund type
      const fundType = Object.keys(typeToRangeMap).find(key =>
        typeToRangeMap[key] === rangeName
      );

      allBalances[fundType] = {
        items: fundBalances,
        total: Math.round(fundTotal*100)/100,
        rangeName: rangeName
      };

      grandTotal += Math.round(fundTotal*100)/100;
    }

    return {
      success: true,
      type: "all",
      balances: allBalances,
      grandTotal: grandTotal
    };

  } catch (error) {
    return {
      success: false,
      error: `‚ùå L·ªói khi l·∫•y t·∫•t c·∫£ s·ªë d∆∞ qu·ªπ: ${error.toString()}`
    };
  }
}

//ƒë·ªãnh d·∫°ng s·ªë d∆∞ qu·ªπ ƒë·ªÉ hi·ªÉn th·ªã
function formatFundBalances(balanceData) {
  if (!balanceData.success) {
    return balanceData.error;
  }

  if (balanceData.type === "all") {
    let message = "üí∞ **T·ªïng quan s·ªë d∆∞ c√°c qu·ªπ**\n";
    message += "=" .repeat(30) + "\n\n";

    const fundNames = {
      "rainy": "üõü Qu·ªπ Gia ƒê√¨nh",
      "target": "üéØ Qu·ªπ M·ª•c ƒê√≠ch",
      "saving": "üíé Ti·∫øt Ki·ªám"
    };

    Object.keys(balanceData.balances).forEach(fundType => {
      const fund = balanceData.balances[fundType];
      const fundName = fundNames[fundType] || fundType;

      message += `**${fundName}**\n`;

      if (Object.keys(fund.items).length > 0) {
        Object.entries(fund.items).forEach(([name, amount]) => {
          message += `  ‚Ä¢ ${name}: ‚Ç¨${amount.toFixed(2)}\n`;
        });
        message += `  **T·ªïng: ‚Ç¨${fund.total.toFixed(2)}**\n\n`;
      } else {
        message += `  _Kh√¥ng c√≥ d·ªØ li·ªáu_\n\n`;
      }
    });

    message += `üè¶ **T·ªïng c·ªông t·∫•t c·∫£ qu·ªπ: ‚Ç¨${balanceData.grandTotal.toFixed(2)}**`;
    return message;

  } else {
    // Single fund type
    const fundNames = {
      "rainy": "üõü Qu·ªπ Gia ƒê√¨nh",
      "target": "üéØ Qu·ªπ M·ª•c ƒê√≠ch",
      "saving": "üíé Ti·∫øt Ki·ªám"
    };

    const fundName = fundNames[balanceData.type] || balanceData.type;
    let message = `üí∞ **${fundName}**\n`;
    message += "=" .repeat(20) + "\n\n";

    if (Object.keys(balanceData.balances).length > 0) {
      Object.entries(balanceData.balances).forEach(([name, amount]) => {
        message += `‚Ä¢ ${name}: ‚Ç¨${amount.toFixed(2)}\n`;
      });
      message += `\n**T·ªïng: ‚Ç¨${balanceData.total.toFixed(2)}**`;
    } else {
      message += "_Kh√¥ng c√≥ d·ªØ li·ªáu_";
    }

    return message;
  }
}

//---------------CONTEXT-------------------//
//l·∫•y danh s√°ch c√°c nh√≥m v√† m·ª•c giao d·ªãch
function getTxCat() {
  const namedRanges = [
    "ThuNhap",
    "ChiPhiCoDinh",
    "ChiPhiBienDoi",
    "QuyGiaDinh",
    "QuyMucDich",
    "TietKiem"
  ];

  const catTxSheet = SpreadsheetApp.openById(SPREADSHEET_ID);

  const promptParts = [];
  promptParts.push("C√°c giao d·ªãch t√†i ch√≠nh ƒë∆∞·ª£c ph√¢n v√†o c√°c nh√≥m/m·ª•c nh∆∞ sau:");

  namedRanges.forEach((rangeName, index) => {
    const namedRange = catTxSheet.getRangeByName(rangeName);
    if (!namedRange) return;

    const sheet = namedRange.getSheet();
    const startRow = namedRange.getRow();    
    const numRows = namedRange.getNumRows();

    // M·ªü r·ªông t·ª´ c·ªôt A ƒë·∫øn C => width = 3
    const fullRange = sheet.getRange(startRow, 1, numRows, 3);
    const values = fullRange.getValues();

    // L·∫•y t√™n nh√≥m t·ª´ c·ªôt A (duy nh·∫•t trong ƒëo·∫°n n√†y)
    const uniqueGroupNames = [...new Set(values.map(row => row[0]).filter(name => !!name))];
    const groupName = uniqueGroupNames[0] || rangeName;

    const items = [];
    values.forEach(([, muc, mieuta]) => {
      if (muc && mieuta) {
        items.push(`  ${muc}: ${mieuta}`);
      }
    });

    if (items.length > 0) {
      promptParts.push(`\n${index + 1}/ ${groupName}:\n${items.join('\n')}`);
    }
  });
  
  const instructionCatPrompt = promptParts.join("\n");
  return instructionCatPrompt;
}

//l·∫•y ho√†n c·∫£nh gia ƒë√¨nh
function getFamilyContext() {
  const props = PropertiesService.getScriptProperties();
  const sheetName = props.getProperty('sheet_ContextConfig') || 'ü§ñT√πy ch·ªânh Prompts';

  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName(sheetName);
  if (!sheet) return "";

  const data = sheet.getDataRange().getValues();
  const headers = data[0];
  const rows = data.slice(1);

  const contextMap = new Map (); // Nh√≥m -> array of lines

  rows.forEach(([nhom, ten, noidung]) => {
    if (!nhom || !ten || !noidung) return;
    if (!contextMap.has(nhom)) contextMap.set(nhom, []);
    contextMap.get(nhom).push(`- ${ten}: ${noidung}`);
  });

  const parts = [];

  if (contextMap.has("Ho√†n c·∫£nh")) {
    parts.push("üè† Ho√†n c·∫£nh h·ªô gia ƒë√¨nh:");
    parts.push(...contextMap.get("Ho√†n c·∫£nh"));
  }

  let contextPrompt = parts.join("\n");
  return contextPrompt;
}

//l·∫•y ch·ªâ d·∫´n ph√¢n lo·∫°i giao d·ªãch
function getCategoriseInstructions() {
  const props = PropertiesService.getScriptProperties();
  const sheetName = props.getProperty('sheet_ContextConfig') || 'ü§ñT√πy ch·ªânh Prompts';

  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName(sheetName);
  if (!sheet) return "";

  const data = sheet.getDataRange().getValues();
  const headers = data[0];
  const rows = data.slice(1);

  const contextMap = new Map (); // Nh√≥m -> array of lines

  rows.forEach(([nhom, ten, noidung]) => {
    if (!nhom || !ten || !noidung) return;
    if (!contextMap.has(nhom)) contextMap.set(nhom, []);
    contextMap.get(nhom).push(`- ${ten}: ${noidung}`);
  });

  const parts = [];

   if (contextMap.has("Ch·ªâ d·∫´n ph√¢n lo·∫°i")) {
    parts.push("üîç H∆∞·ªõng d·∫´n ph√¢n lo·∫°i giao d·ªãch:");
    parts.push(...contextMap.get("Ch·ªâ d·∫´n ph√¢n lo·∫°i"));
  }

  let contextPrompt = parts.join("\n");  
  return contextPrompt;
}

//l·∫•y ch·ªâ d·∫´n t·∫°o d·ª± to√°n chi ti√™u
function getBudgetInstructions() {
  const props = PropertiesService.getScriptProperties();
  const sheetName = props.getProperty('sheet_ContextConfig') || 'ü§ñT√πy ch·ªânh Prompts';

  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName(sheetName);
  if (!sheet) return "";

  const data = sheet.getDataRange().getValues();
  const headers = data[0];
  const rows = data.slice(1);

  const contextMap = new Map (); // Nh√≥m -> array of lines

  rows.forEach(([nhom, ten, noidung]) => {
    if (!nhom || !ten || !noidung) return;
    if (!contextMap.has(nhom)) contextMap.set(nhom, []);
    contextMap.get(nhom).push(`- ${ten}: ${noidung}`);
  });

  const parts = [];

  if (contextMap.has("Ch·ªâ d·∫´n d·ª± to√°n")) {
    parts.push("üí∂ H∆∞·ªõng d·∫´n d·ª± to√°n:");
    parts.push(...contextMap.get("Ch·ªâ d·∫´n d·ª± to√°n"));
  }

  let contextPrompt = parts.join("\n");  
  return contextPrompt;
}
//x·ª≠ l√Ω c√°c API calls v·ªõi LLM (v0.3 h·ªó tr·ª£ OpenAI /responses)

//ph√¢n lo·∫°i giao d·ªãch
function classifyTransactionWithAI(subject, body) {
  const apiKey = OPENAI_TOKEN;
  const currentTime = Utilities.formatDate(new Date(), Session.getScriptTimeZone(), "HH:mm dd/MM/yyyy");

  //t·∫°o prompt ho√†n c·∫£nh v√† ph√¢n lo·∫°i
  //const contextPrompt = generateContextExpensePrompt ();
  const familyContext = getFamilyContext ();
  const catInstructions = getCategoriseInstructions ();  
  const catPrompt = getTxCat ();

  let mainPrompt = `
  ${familyContext}
  \n${catInstructions} 
  \n${catPrompt}

  - Ti√™u ƒë·ªÅ email: ${subject}
  - N·ªôi dung email: ${body}

  Tr·∫£ v·ªÅ k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng JSON 9 kh√≥a sau, kh√¥ng c√≥ d·∫•u code block, kh√¥ng c√≥ l·ªùi gi·∫£i th√≠ch: 
    - tab: t√™n tab c·∫ßn th√™m giao d·ªãch ƒë√∫ng nh∆∞ trong danh s√°ch
    - category: m·ª•c theo ƒë√∫ng t√™n m·ª•c nh∆∞ m√¥ t·∫£
    - type: c√≥ 2 gi√° tr·ªã "ü§ëThu" ho·∫∑c "üí∏Chi"
    - date: ng√†y ph√°t sinh giao d·ªãch theo ƒë·ªãnh d·∫°ng DD/MM/YYYY
    - desc: ghi ch√∫ v·ªÅ giao d·ªãch, ng·∫Øn g·ªçn, t·ªëi ƒëa 30 k√Ω t·ª±
    - amount: s·ªë ti·ªÅn giao d·ªãch theo ƒë·ªãnh d·∫°ng ‚Ç¨20.00 (b·ªè d·∫•u + hay - n·∫øu c·∫ßn thi·∫øt)
    - location: th√†nh ph·ªë n∆°i ph√°t sinh giao d·ªãch, n·∫øu kh√¥ng ƒëo√°n ƒë∆∞·ª£c th√¨ ghi N/A
    - bankcomment: tr√≠ch ch√∫ th√≠ch Ng√¢n h√†ng, ch·ªâ ghi th√¥ng tin ƒë·ªãa ƒëi·ªÉm ph√°t sinh giao d·ªãch    
  `; 

  const response = UrlFetchApp.fetch('https://api.openai.com/v1/responses', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${apiKey}`,
      'Content-Type': 'application/json',
    },
    payload: JSON.stringify({
      model: 'gpt-4.1',
      input: [
        { role: "system", content: `B·∫°n l√† m·ªôt c·ªë v·∫•n t√†i ch√≠nh c√° nh√¢n. B·∫°n ƒëang ƒë·ªçc email th√¥ng b√°o giao d·ªãch c·ªßa ng√¢n h√†ng ƒë·ªÉ ph√¢n lo·∫°i gi√∫p kh√°ch h√†ng.M·ªëc th·ªùi gian hi·ªán t·∫°i l√†  ${currentTime}` },
        { role: "user", content: mainPrompt }
      ],
      temperature: 0.5,
    }),
    muteHttpExceptions: true,
  });

  try {
    const json = JSON.parse(response.getContentText());
    const reply = JSON.parse(json.output[0].content[0].text);
    return reply;
  } catch (e) {    
    return {
      tab: 'üõí Chi ph√≠ bi·∫øn ƒë·ªïi',
      category: 'Kh√°c',
      note: 'Kh√¥ng ph√¢n lo·∫°i ƒë∆∞·ª£c v·ªõi AI',
    };
  }
}

//ph√¢n t√≠ch d·ªØ li·ªáu (giao d·ªãch, d·ª± to√°n)
function analyseDataWithOpenAI(promptText) {
  const apiKey = OPENAI_TOKEN;
  const currentTime = Utilities.formatDate(new Date(), Session.getScriptTimeZone(), "HH:mm dd/MM/yyyy");

  const payload = {
    model: "gpt-4.1", 
    input: [
      { role: "system", content: `B·∫°n l√† m·ªôt chuy√™n gia t√†i ch√≠nh c√° nh√¢n ƒëang trao ƒë·ªïi v·ªõi kh√°ch h√†ng qua Telegram. M·ªëc th·ªùi gian hi·ªán t·∫°i l√† th√°ng ${currentTime}` },
      { role: "user", content: promptText }
    ],
    temperature: 0.5
  };

  const options = {
    method: "POST",
    contentType: "application/json",
    headers: {
      Authorization: `Bearer ${apiKey}`
    },
    payload: JSON.stringify(payload),
    muteHttpExceptions: true
  };

  try {
    const response = UrlFetchApp.fetch("https://api.openai.com/v1/responses", options);
    const json = JSON.parse(response.getContentText());    
    return json.output[0].content[0].text;
  } catch (e) {
    return "üò±Kh√¥ng th·ªÉ ph√¢n t√≠ch. ƒê√£ x·∫£y ra l·ªói." + e;
  }
}

//x√°c ƒë·ªãnh √Ω ƒë·ªãnh trong y√™u c·∫ßu c·ªßa ng∆∞·ªùi s·ª≠ d·ª•ng
function detectUserIntentWithOpenAI(promptText) {  
  const apiKey = OPENAI_TOKEN;
  const currentTime = Utilities.formatDate(new Date(), Session.getScriptTimeZone(), "HH:mm dd/MM/yyyy");
  
  const payload = {
    model: "gpt-4.1",
    input: [
      {
        role: "system",
        content: `B·∫°n l√† m·ªôt c·ªë v·∫•n t√†i ch√≠nh c√° nh√¢n ƒëang trao ƒë·ªïi v·ªõi kh√°ch h√†ng qua Telegram v√† Email. M·ªëc th·ªùi gian hi·ªán t·∫°i l√† th√°ng ${currentTime}.`
      },
      {
        role: "user",
        content: promptText
      }
    ],
    temperature: 0.5
  };

  const options = {
    method: "POST",
    contentType: "application/json",
    headers: {
      Authorization: `Bearer ${apiKey}`
    },
    payload: JSON.stringify(payload),
    muteHttpExceptions: true
  };

  const response = UrlFetchApp.fetch("https://api.openai.com/v1/responses", options);
  const json = JSON.parse(response.getContentText());
  const content = json.output[0].content[0].text;

  try {    
    return JSON.parse(content);
  } catch (e) {
    return {intent: "unknown"};
  }
}

//x√°c ƒë·ªãnh prompt ƒë·ªÉ c·∫£i thi·ªán nh·∫≠n di·ªán
function detectNewContextWithAI(originalText, replyText, originalBankCmt) {  

  const apiKey = OPENAI_TOKEN  
  userText = `Tin nh·∫Øn c·ªßa b·∫°n: ${originalText}\nPh·∫£n h·ªìi c·ªßa kh√°ch h√†ng: ${replyText}\nGhi ch√∫ g·ªëc c·ªßa ng√¢n h√†ng: ${originalBankCmt}`  

  //t·∫°o prompt ho√†n c·∫£nh v√† ph√¢n lo·∫°i
  const familyContext = getFamilyContext ();
  const categoriseInstructions = getCategoriseInstructions ();
  const categories = getTxCat ();
  
  let mainPrompt = `
  H∆∞·ªõng d·∫´n:
  \n${familyContext}
  \n${categoriseInstructions}
  \n${categories}

  ƒê√¢y l√† m·ªôt th√¥ng b√°o giao d·ªãch k√®m ghi ch√∫ g·ªëc c·ªßa ng√¢n h√†ng k√®m ph√†n h·ªìi c·ªßa kh√°ch h√†ng
  ${userText}\n
  B·∫°n l√† chuy√™n gia qu·∫£n l√Ω t√†i ch√≠nh c√° nh√¢n nh∆∞ng ch∆∞a bi·∫øt h·∫øt v·ªÅ ho√†n c·∫£nh s·ª≠ d·ª•ng c·ªßa kh√°ch h√†ng.
  H√£y 
  - so s√°nh gi·ªØa tin nh·∫Øn g·ªëc, tin ph·∫£n h·ªìi c·ªßa c·ªßa kh√°ch h√†ng v√† ghi ch√∫ g·ªëc c·ªßa ng√¢n h√†ng
  - so s√°nh v·ªõi c√°c h∆∞·ªõng d·∫´n trong ph·∫ßn Ch·ªâ d·∫´n ph√¢n lo·∫°i. 
      - N·∫øu ƒë√£ t·ªìn t·∫°i instructionGroup, instructionName, instructionContent c√≥ gi√° tr·ªã t∆∞∆°ng t·ª± trong ph·∫ßn H∆∞·ªõng d·∫´n, tr·∫£ v·ªÅ JSON v·ªõi gi√° tr·ªã "" cho t·∫•t c·∫£ c√°c kh√≥a.
      - N·∫øu ch∆∞a t·ªìn t·∫°i ch·ªâ d·∫´n, ghi l·∫°i ƒëi·ªÉm c·∫ßn l∆∞u √Ω ƒë·ªÉ l·∫ßn sau b·∫°n c√≥ th·ªÉ ph√¢n lo·∫°i giao d·ªãch ch√≠nh x√°c h∆°n d·ª±a v√†o ghi ch·ªß c·ªßa ng√¢n h√†ng v√† tr·∫£ l·∫°i JSON theo c·∫•u tr√∫c sau, kh√¥ng c√≥ d·∫•u code block
      {
        "instructionGroup": c√≥ 1 trong 3 gi√° tr·ªã: 
          - "Ho√†n c·∫£nh": b·ªï sung th√¥ng tin v·ªÅ ho√†n c·∫£nh gia ƒë√¨nh nh∆∞ th√†nh ph·∫ßn gia ƒë√¨nh, con c√°i, nh√† c·ª≠a
          - "Ch·ªâ d·∫´n ph√¢n lo·∫°i": b·ªï sung th√¥ng tin ƒë·ªÉ vi·ªác ph√¢n lo·∫°i t·ªët h∆°n nh∆∞ n∆°i ph√°t sinh giao d·ªãch,c√°c ƒë·ªãa ƒëi·ªÉm, c·ª≠a h√†ng v√† c√°c m·ª•c t∆∞∆°ng ·ª©ng
          - "Ch·ªâ d·∫´n d·ª± to√°n": b·ªï sung th√¥ng tin ƒë·ªÉ vi·ªác ph√¢n lo·∫°i t·ªët h∆°n nh∆∞ n∆°i ph√°t sinh giao d·ªãch, c√°c ƒë·ªãa ƒëi·ªÉm, c·ª≠a h√†ng v√† c√°c m·ª•c t∆∞∆°ng ·ª©ng
        "instructionName": t√™n c·ªßa topic, v√≠ d·ª•: 
            Ho√†n c·∫£nh: Gia ƒëinh, con c√°i, xe, th√∫ c∆∞ng, th√≥i quen s·ªëng
            Ch·ªâ d·∫´n ph√¢n lo·∫°i: h∆∞·ªõng d·∫©n ƒë·ªÉ c·∫£i thi·ªán ph√¢n lo·∫°i d·ª±a tr√™n ph·∫ßn h·ªìi c·ªßa kh√°ch h√†ng, ghi ch√∫ g·ªëc c·ªßa ng√¢n h√†ng
        "instructionContent": ƒëi·ªÉm c·∫ßn l∆∞u √Ω ƒë·ªÉ l·∫ßn sau b·∫°n c√≥ th·ªÉ ph√¢n lo·∫°i giao d·ªãch ch√≠nh x√°c h∆°n
        V√≠ d·ª•: 
          "instructionGroup":"Ch·ªâ d·∫´n ph√¢n lo·∫°i"
          "instructionName":"Ho√†n ti·ªÅn b·∫£o hi·ªÉm"	
          "instructionContent":"GENERATION l√† ti·ªÅn ho√†n b·∫£o hi·ªÉm, ghi v√†o m·ª•c Thu trong Qu·ªπ gia ƒë√¨nh"
      }
  `   

  const payload = {
    model: "gpt-4.1",
    input: [
      {
        role: "system",
        content: `B·∫°n l√† m·ªôt chuy√™n gia t√†i ch√≠nh c√° nh√¢n. B·∫°n ph√¢n lo·∫°i c√°c giao d·ªãch c·ªßa kh√°ch h√†ng v√† ghi ch√∫ nh·ªØng ti√™u ch√≠ c·∫ßn thi·∫øt ƒë·ªÉ lu√¥n lu√¥n c·∫£i thi·ªán giao d·ªãch. M·ªëc th·ªùi gian hi·ªán t·∫°i l√† ${currentMonth}`                
      },
      {
        role: "user",
        content: mainPrompt
      }
    ],
    temperature: 0.6
  };

  const options = {
    method: "POST",
    contentType: "application/json",
    headers: {
      Authorization: `Bearer ${apiKey}`
    },
    payload: JSON.stringify(payload),
    muteHttpExceptions: true
  };

  const response = UrlFetchApp.fetch("https://api.openai.com/v1/responses", options);
  const json = JSON.parse(response.getContentText());
  const content = json.output[0].content[0].text;
  Logger.log (content);

  try {    
    return JSON.parse(content);
  } catch (e) {
    return { intent: "unknown" };
  }
}

/*//ph√¢n lo·∫°i tin tr·∫£ l·ªùi v0.2
function classifyReplyWithAI(originalMsg, replyMsg) {
  const apiKey = OPENAI_TOKEN;

  //t·∫°o prompt ho√†n c·∫£nh v√† ph√¢n lo·∫°i
  const contextprompt = generateContextPrompt ();
  const catprompt = generateTxCatPrompt ();

  const mainprompt = `
  ${contextprompt}
  \n${catprompt}
  
  Tin nh·∫Øn th√¥ng b√°o bi·∫øn ƒë·ªông t√†i kho·∫£n v√† tin ph·∫£n h·ªìi c·ªßa ch·ªß t√†i kho·∫£n nh∆∞ sau. 
   - Tin nh·∫Øn th√¥ng b√°o: ${originalMsg}
   - Tin nh·∫Øn ph·∫£n h·ªìi: ${replyMsg}

  B·∫°n l√† chuy√™n gia c·ªë v·∫•n t√†i ch√≠nh c√° nh√¢n, cƒÉn c·ª© v√†o H∆∞·ªõng d·∫´n ph√¢n lo·∫°i tr√™n  ƒë√¢y, x√°c ƒë·ªãnh h√†nh ƒë·ªông c·∫ßn l√†m trong tin nh·∫Øn ph·∫£n h·ªìi, tr·∫£ v·ªÅ k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng JSON 10 kh√≥a sau, kh√¥ng c√≥ d·∫•u code block, kh√¥ng c√≥ l·ªùi gi·∫£i th√≠ch: 
    - action: t√™n h√†nh ƒë·ªông c·∫ßn l√†m, ch·ªçn 1 trong 3 gi√° tr·ªã sau
        - update: s·ª≠a d√≤ng trong tin nh·∫Øn th√¥ng b√°o
        - delete: x√≥a d√≤ng trong tin nh·∫Øn th√¥ng b√°o
        - move: chuy·ªÉn d√≤ng trong tin nh·∫Øn th√¥ng b√°o sang 1 tab kh√°c
    - tab: t√™n tab m·ªõi ƒë√∫ng nh∆∞ trong danh s√°ch n·∫øu c·∫ßn ƒë·ªïi giao d·ªãch qua tab kh√°c    
    - date: ng√†y ph√°t sinh giao d·ªãch theo ƒë·ªãnh d·∫°ng DD/MM/YYYY    
    - desc: m√¥ t·∫£ v·ªÅ giao d·ªãch, ng·∫Øn g·ªçn, t·ªëi ƒëa 30 k√Ω t·ª±
    - amount: s·ªë ti·ªÅn giao d·ªãch theo ƒë·ªãnh d·∫°ng ‚Ç¨20.00 (b·ªè d·∫•u + hay - n·∫øu c·∫ßn thi·∫øt)
    - location: n∆°i ph√°t sinh giao d·ªãch. 3 gi√° tr·ªã th∆∞·ªùng g·∫∑p l√† Rennes, Nantes, N/A
    - category: m·ª•c m·ªõi theo ƒë√∫ng t√™n m·ª•c nh∆∞ m√¥ t·∫£         
    - comment: l·ªùi ch√∫ th√≠ch c·ªßa Ng√¢n h√†ng nh∆∞ trong th√¥ng b√°o g·ªëc    
    - row: s·ªë th·ª© t·ª± c·ªßa d√≤ng c·∫ßn c·∫≠p nh·∫≠t
    - confirmation: tin nh·∫Øn x√°c nh·∫≠n thay ƒë·ªïi c·∫ßn l√†m    
  `;

  const response = UrlFetchApp.fetch('https://api.openai.com/v1/responses', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${apiKey}`,
      'Content-Type': 'application/json',
    },
    payload: JSON.stringify({
      model: 'gpt-4.1',
      input: [{ role: 'user', content: mainprompt }],
      temperature: 0.5,
    }),
    muteHttpExceptions: true,
  });

  try {
    const json = JSON.parse(response.getContentText());
    const reply = JSON.parse(json.output[0].content[0].text);
    return reply;
  } catch (e) {
    Logger.log("AI Error: " + e);
    return {
      tab: '',
      category: 'Unclassified',
      note: message,
    };
  }
}*/
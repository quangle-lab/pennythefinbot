//qu·∫£n l√Ω v√† l·∫•y d·ªØ li·ªáu t·ª´ sheets d∆∞·ªõi d·∫°ng text


//---------------BUDGET-------------------//
//t·∫°o budget c√≥ ch·ªçn l·ªçc - ch·ªâ t·∫°o c√°c d√≤ng ch∆∞a t·ªìn t·∫°i
function createBudgetSelectively(newMonthText, sourceMonthText) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("üí∂D·ª± to√°n");
  if (!sheet) {
    return {
      error: "‚ùå Kh√¥ng t√¨m th·∫•y sheet 'üí∂D·ª± to√°n'"
    };
  }

  const data = sheet.getDataRange().getValues();
  const timezone = Session.getScriptTimeZone();

  // Step 1: Check existing budget lines for the new month
  const existingBudgetLines = [];
  const existingCategories = new Set();

  data.forEach((row, index) => {
    if (index === 0) return; // Skip header

    const rowMonthText = Utilities.formatDate(row[0], timezone, "MM/yyyy");
    const group = row[1];
    const category = row[2];
    const amount = row[3];
    const note = row[4];

    if (rowMonthText === newMonthText) {
      existingBudgetLines.push({
        group: group,
        category: category,
        amount: amount,
        note: note || ''
      });
      existingCategories.add(category);
    }
  });

  // Step 2: Get source month data and filter out existing categories
  const sourceMonthItems = [];
  const newItemsToCreate = [];

  data.forEach((row, index) => {
    if (index === 0) return; // Skip header

    const rowMonthText = Utilities.formatDate(row[0], timezone, "MM/yyyy");
    const group = row[1];
    const category = row[2];
    const amount = row[3];
    const note = row[4];

    if (rowMonthText === sourceMonthText) {
      sourceMonthItems.push({
        group: group,
        category: category,
        amount: amount,
        note: note || ''
      });

      // Only add to creation list if category doesn't exist in new month
      if (!existingCategories.has(category)) {
        newItemsToCreate.push({
          group: group,
          category: category,
          amount: Math.round(amount*100)/100,  
          note: ''
        });
      }
    }
  });

  // Check if source month has data
  if (sourceMonthItems.length === 0) {
    return {
      error: `‚ùå Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu d·ª± to√°n cho th√°ng ngu·ªìn *${sourceMonthText}*`
    };
  }

  // Step 3: Create new budget lines (skip existing ones)
  let createdCount = 0;
  if (newItemsToCreate.length > 0) {
    const newRows = [];
    newItemsToCreate.forEach(item => {
      const newRow = [newMonthText, item.group, item.category, item.amount, item.note];
      newRows.push(newRow);
    });

    if (newRows.length > 0) {
      sheet.getRange(sheet.getLastRow() + 1, 1, newRows.length, newRows[0].length).setValues(newRows);
      createdCount = newRows.length;
    }
  }

  // Step 4: Generate summary message
  let summary = `‚úÖ *T·∫°o d·ª± to√°n th√°ng ${newMonthText}*\:\n\n`;

  if (createdCount > 0) {
    summary += `‚ûï ƒê√£ t·∫°o ${createdCount} d·ª± to√°n m·ªõi t·ª´ th√°ng ${sourceMonthText}\n`;

    // Group new items by category for display
    const groupedNewItems = {};
    newItemsToCreate.forEach(item => {
      if (!groupedNewItems[item.group]) groupedNewItems[item.group] = [];
      groupedNewItems[item.group].push(`  ‚Ä¢ ${item.category}: ‚Ç¨${item.amount}`);
    });

    Object.keys(groupedNewItems).forEach(group => {
      summary += `\n*${group}*\:\n${groupedNewItems[group].join('\n')}`;
    });
  } else {
    summary += `‚ÑπÔ∏è Kh√¥ng c√≥ d·ª± to√°n m·ªõi n√†o ƒë∆∞·ª£c t·∫°o (t·∫•t c·∫£ ƒë√£ t·ªìn t·∫°i)`;
  }

  if (existingBudgetLines.length > 0) {
    summary += `\n\n‚ö†Ô∏è ƒê√£ b·ªè qua ${existingBudgetLines.length} d·ª± to√°n ƒë√£ t·ªìn t·∫°i`;
  }

  return {
    success: true,
    summary: summary,
    existingLines: existingBudgetLines,
    createdCount: createdCount,
    skippedCount: existingBudgetLines.length,
    newMonthText: newMonthText,
    sourceMonthText: sourceMonthText
  };
}

//thay ƒë·ªïi budget
function setBudgetChange(month, group, category, amount, note) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('üí∂D·ª± to√°n');
  if (!sheet) {
    Logger.log("Sheet 'üí∂D·ª± to√°n' not found.");
    return "‚ùå Kh√¥ng t√¨m th·∫•y sheet 'üí∂D·ª± to√°n'";
  }

  const data = sheet.getDataRange().getValues();
  const timezone = Session.getScriptTimeZone();

  for (let i = 1; i < data.length; i++) { // Skip header row
    const row = data[i];
    const dateCell = row[0];
    const groupCell = row[1];
    const categoryCell = row[2];

    const rowMonth = Utilities.formatDate(new Date(dateCell), timezone, "MM/yyyy");

    if (rowMonth === month && groupCell === group && categoryCell === category) {
      sheet.getRange(i + 1, 4).setValue(amount);  // Column D = amount
      sheet.getRange(i + 1, 5).setValue(note);    // Column E = ghi ch√∫
      return `‚úÖ ƒê√£ c·∫≠p nh·∫≠t d·ª± to√°n th√°ng ${rowMonth} cho *${category}* \(${group}\)\: ‚Ç¨${amount}`; // Stop after first match
    }
  }

  // N·∫øu ch∆∞a c√≥, th√™m m·ªõi  
  sheet.appendRow([month, group, category, amount, note]);
  return `‚ûï ƒê√£ th√™m d·ª± to√°n th√°ng ${month} cho *${category}* \(${group}\)\: ‚Ç¨${amount}`;
}

//helper function ƒë·ªÉ format s·ªë v·ªõi d·∫•u ph√¢n c√°ch h√†ng ngh√¨n
function formatNumberWithSeparator(number) {
  return number.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",");
}

//l·∫•y d·ªØ li·ªáu d·ª± to√°n cho th√°ng monthText (MM/yyyy)
function getBudgetData (monthText) {  
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("üí∂D·ª± to√°n");
  const data = sheet.getDataRange().getValues();

  const timezone = Session.getScriptTimeZone();

  const monthRows = data.filter((row,index) => {
    if (index === 0) return;
    const date = row[0]; // Gi·∫£ s·ª≠ c·ªôt A l√† ng√†y th√°ng
    const formatted = Utilities.formatDate(new Date(date), timezone, "MM/yyyy");
    return formatted === monthText;
  });

  const summary = {};
  monthRows.forEach(row => {
    const tab = row[1];
    const category = row[2];
    const budget = row[3];
    if (!summary[tab]) summary[tab] = [];
    summary[tab].push(`- ${category}: ‚Ç¨${formatNumberWithSeparator(budget)}`);
  });

  let monthBudgetData = `D·ª± to√°n c·ªßa th√°ng *${monthText}*\n============`;
  for (const tab in summary) {
    monthBudgetData += `\n\n*${tab}*\n${summary[tab].join("\n")}`;
  }

  return monthBudgetData;
}

//---------------SPENDING-------------------//
//l·∫•y d·ªØ li·ªáu dashboard cho th√°ng monthText (MM/yyyy)
function getDashboardData (monthText) {  

  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const dashboard = ss.getSheetByName("üõ§Ô∏è Dashboard");

  let firstofMonthText = "01/" + monthText

  // 1. Ghi th√°ng v√†o √¥ A1 ƒë·ªÉ c√°c s·ªë li·ªáu c·∫≠p nh·∫≠t
  dashboard.getRange("A1").setValue(firstofMonthText);

  // 2. C√°c named range c·∫ßn l·∫•y d·ªØ li·ªáu
  const rangeNames = [
    "thongke_ThuNhap",
    "thongke_ChiPhiCoDinh",
    "thongke_ChiPhiBienDoi",    
    "thongke_QuyGiaDinh",
    "thongke_QuyMucDich",
    "thongke_TietKiem"
  ];

  const dataSections = [];

  rangeNames.forEach(name => {
    const range = ss.getRangeByName(name);
    if (!range) return;

    const values = range.getValues();
    const label = name.replace("thongke_", "").replace(/([A-Z])/g, ' $1').trim();

    let section = `üìä ${label}:\n`;

    values.forEach(([muc, dudoan, thucte, chenhlech], index) => {
      if (index===0) return;      
      if (muc!==null && muc!=="" && dudoan!==null && thucte!==null && chenhlech!==null) {
        if (index >1) {
          dudoan = Math.round(dudoan * 100) / 100;
          thucte = Math.round(thucte * 100) / 100;
          chenhlech = Math.round(chenhlech * 100) / 100;
        }
        section += `- ${muc}|${dudoan}|${thucte}|${chenhlech}\n`;
      }
    });

    dataSections.push(section.trim());
  });

  //Tr·∫£ l·∫°i A1 v·ªÅ ng√†y 1 c·ªßa th√°ng hi·ªán t·∫°i
  const today = new Date();
  const firstOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);
  dashboard.getRange("A1").setValue(Utilities.formatDate(firstOfMonth, ss.getSpreadsheetTimeZone(), "dd/MM/yyyy"));

  const monthDashboardData = `
  T·ªïng h·ª£p giao d·ªãch th√°ng ${monthText}\n
  Cho m·ªói m·ª•c, c√°c s·ªë li·ªáu ƒë∆∞·ª£c li·ªát k√™ trong 4 c·ªôt l√† M·ª•c, D·ª± ƒëo√°n, Th·ª±c T·∫ø, Ch√™nh l·ªách. 
    - ƒê·ªëi v·ªõi c√°c giao d·ªãch chi, 
        - s·ªë ch√™nh l·ªách √¢m nghƒ©a l√† chi nhi·ªÅu h∆°n d·ª± t√≠nh - x·∫•u
        - d∆∞∆°ng nghƒ©a l√† chi √≠t h∆°n d·ª± t√≠nh - t·ªët
    - ƒê·ªëi v·ªõi c√°c m·ª•c Thu trong c√°c Qu·ªπ, L∆∞∆°ng v√† Thu nh·∫≠p kh√°c nh√≥m ph·∫ßn Thu Nh·∫≠p, c√°c m·ª•c chi cho Qu·ªπ Gia ƒê√¨nh, Qu·ªπ M·ª•c ƒê√≠ch v√† Ti·∫øt Ki·ªám trong Chi ph√≠ c·ªë ƒë·ªãnh
        - s·ªë ch√™nh l·ªách √¢m nghƒ©a l√† thu √≠t h∆°n d·ª± t√≠nh - x·∫•u
        - d∆∞∆°ng nghƒ©a l√† thu nhi·ªÅu h∆°n d·ª± t√≠nh - t·ªët
    ${dataSections.join("\n\n")}
  `;  
  return monthDashboardData;
}

//ki·ªÉm tra giao d·ªãch ƒë√£ t·ªìn t·∫°i v√† x·ª≠ l√Ω x√°c nh·∫≠n th√™m m·ªõi
function checkAndConfirmTransaction(transaction) {
  const { date, amount, description, bankComment, category, group } = transaction;

  // Validate input parameters
  if (!date || !amount || !description || !group) {
    return {
      exists: false,
      needsConfirmation: false,
      error: "‚ùå Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc: date, amount, description, group"
    };
  }

  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName(group);

  if (!sheet) {
    return {
      exists: false,
      needsConfirmation: false,
      error: `‚ùå Kh√¥ng t√¨m th·∫•y sheet "${group}"`
    };
  }

  // Get all data from the sheet
  const data = sheet.getDataRange().getValues();
  const timezone = Session.getScriptTimeZone();

  // Parse input date for comparison
  let inputDate;
  try {
    // Handle different date formats
    if (typeof date === 'string') {
      const dateParts = date.split('/');
      if (dateParts.length === 3) {
        // DD/MM/YYYY format
        inputDate = new Date(`${dateParts[2]}-${dateParts[1]}-${dateParts[0]}`);
      } else {
        inputDate = new Date(date);
      }
    } else {
      inputDate = new Date(date);
    }
  } catch (e) {
    return {
      exists: false,
      needsConfirmation: false,
      error: `‚ùå ƒê·ªãnh d·∫°ng ng√†y kh√¥ng h·ª£p l·ªá: ${date}`
    };
  }

  // Check for existing transactions (skip header row)
  const existingRows = [];
  for (let i = 1; i < data.length; i++) {
    const row = data[i];
    const rowDate = row[0]; // Column A: Date
    const rowAmount = row[2]; // Column C: Amount
    const rowLocation = row[3]; // Column D: Location
    const rowCategory = row[4]; // Column E: Category
    const rowBankComment = row[5]; // Column F: Bank Comment
    const rowId = row[6]; // Column G: ID

    // Compare dates
    let rowDateFormatted;
    try {
      rowDateFormatted = Utilities.formatDate(new Date(rowDate), timezone, "dd/MM/yyyy");
      const inputDateFormatted = Utilities.formatDate(inputDate, timezone, "dd/MM/yyyy");

      // Check for potential duplicates based on multiple criteria
      const dateMatch = rowDateFormatted === inputDateFormatted;
      const amountMatch = Math.abs(parseFloat(rowAmount) - parseFloat(amount)) < 0.01; // Allow small floating point differences
      const bankCommentMatch = bankComment && rowBankComment &&
        (rowBankComment.toLowerCase().includes(bankComment.toLowerCase()) ||
         bankComment.toLowerCase().includes(rowBankComment.toLowerCase()));

      // Consider it a potential duplicate if:
      // 1. Same date AND same amount, OR
      // 2. Same date AND similar description, OR
      // 3. Same amount AND same bank comment (if available)
      if ((dateMatch && amountMatch) ||
          (amountMatch && bankCommentMatch)) {
        existingRows.push({
          rowNumber: i + 1,
          date: rowDateFormatted,
          description: rowDesc,
          amount: rowAmount,
          location: rowLocation,
          category: rowCategory,
          bankComment: rowBankComment
        });
      }
    } catch (e) {
      // Skip rows with invalid dates
      continue;
    }
  }

  // Prepare transaction data
  const transactionData = {
    type: transaction.type || 'üí∏Chi',
    date: Utilities.formatDate(inputDate, timezone, "dd/MM/yyyy"),
    description: description,
    amount: amount,
    location: transaction.location || 'N/A',
    category: category || 'Kh√°c',
    bankComment: bankComment || ''
  };

  // Always add the transaction first
  const addResult = addConfirmedTransaction(group, transactionData);
  
  if (!addResult.success) {
    return {
      exists: false,
      needsConfirmation: false,
      error: addResult.error
    };
  }

  // Return results
  if (existingRows.length > 0) {
    // Create message with existing row information
    let message = addResult.message;
    message += `\n\nüîç *T√¨m th·∫•y ${existingRows.length} giao d·ªãch t∆∞∆°ng t·ª±*\:\n`;
    existingRows.forEach((row, index) => {
      message += `\- *D√≤ng ${row.rowNumber}*\: ${row.date} \- ${row.description} \- ‚Ç¨${row.amount}\n`;
    });
    message += `\n‚ùìB·∫°n c√≥ mu·ªën gi·ªØ giao d·ªãch m·ªõi n√†y kh√¥ng?`;

    // Create buttons with simple callback data (transaction ID and existing row numbers)
    const existingRowNumbers = existingRows.map(row => row.rowNumber).join(',');
    const confirmationKeyboard = createDuplicateConfirmationKeyboard(addResult.transactionId, group, existingRowNumbers);

    return {
      exists: true,
      needsConfirmation: true,
      existingRows: existingRows,
      message: message,
      group: group,
      transactionId: addResult.transactionId,
      replyMarkup: confirmationKeyboard
    };
  } else {
    return {
      exists: false,
      needsConfirmation: false,
      message: addResult.message,
      group: group,
      transactionId: addResult.transactionId,
      replyMarkup: addResult.replyMarkup
    };
  }
}

//th√™m giao d·ªãch sau khi ƒë√£ x√°c nh·∫≠n
function addConfirmedTransaction(sheetName, transactionData) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(sheetName);

    if (!sheet) {
      return {
        success: false,
        error: `‚ùå Kh√¥ng t√¨m th·∫•y sheet "${sheetName}"`
      };
    }

    const { type, date, description, amount, location, category, bankComment } = transactionData;

    // Generate unique transaction ID
    const transactionId = generateTransactionId();

    // Add the transaction to the sheet with ID in column G
    const lastRow = sheet.getLastRow();
    sheet.appendRow([
      date,
      description,
      amount,
      location,
      category,
      bankComment,
      transactionId
    ]);

    const newRowNumber = lastRow + 1;

    // Calculate remaining amount for the category
    const remainingData = getCategoryRemainingAmount(sheetName, category);
    let remainingMessage = "";
    
    if (remainingData.success) {
      const remaining = remainingData.remaining;
      const budget = remainingData.budget;      
      
      if (budget > 0) {
        if (remaining >= 0) {
          remainingMessage = `üí∂c√≤n: ‚Ç¨${remaining.toFixed(2)}`;
        } else {
          remainingMessage = `‚ö†Ô∏èƒë√£ v∆∞·ª£t: ‚Ç¨${Math.abs(remaining).toFixed(2)}`;
        }
      }
    }

    // Create delete button for the transaction
    const deleteKeyboard = createDeleteKeyboard(transactionId, sheetName);
    
    return {
      success: true,
      message: `${type} *${amount}* cho *${description}*\n _‚úèÔ∏è${sheetName}, m·ª•c ${category}, ${remainingMessage}_\n_\(ID\: ${transactionId}\)_`,
      rowNumber: newRowNumber,
      sheetName: sheetName,
      transactionId: transactionId,
      replyMarkup: deleteKeyboard
    };

  } catch (error) {
    return {
      success: false,
      error: `‚ùå L·ªói khi th√™m giao d·ªãch: ${error.toString()}`
    };
  }
}


//---------------BALANCES MANAGEMENT-------------------//
//t√≠nh d·ª± to√°n c√≤n l·∫°i cho m·ªôt m·ª•c c·ª• th·ªÉ trong m·ªôt nh√≥m
function getCategoryRemainingAmount(group, category) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    
    // Map group names to their corresponding named range
    const groupToRangeMap = {
      "üí∞Thu nh·∫≠p": "thongke_ThuNhap",
      "üè°Chi ph√≠ c·ªë ƒë·ªãnh": "thongke_ChiPhiCoDinh", 
      "üõíChi ph√≠ bi·∫øn ƒë·ªïi": "thongke_ChiPhiBienDoi",
      "üõüQu·ªπ gia ƒë√¨nh": "thongke_QuyGiaDinh",
      "üéØQu·ªπ m·ª•c ƒë√≠ch": "thongke_QuyMucDich",
      "ü´ôTi·∫øt ki·ªám": "thongke_TietKiem"
    };    

    const rangeName = groupToRangeMap[group];
    if (!rangeName) {
      return {
        success: false,
        error: `‚ùå Kh√¥ng t√¨m th·∫•y nh√≥m "${group}"`
      };
    }

    const range = ss.getRangeByName(rangeName);
    if (!range) {
      return {
        success: false,
        error: `‚ùå Kh√¥ng t√¨m th·∫•y named range "${rangeName}"`
      };
    }

    const values = range.getValues();
    let budget = 0;
    let actual = 0;
    let remaining = 0;

    // Find the category in the range
    for (let i = 1; i < values.length; i++) { // Skip header row
      const row = values[i];
      if (row[0] === category) { // Category is in first column
        budget = parseFloat(row[1]) || 0; // Budget is in second column
        actual = parseFloat(row[2]) || 0; // Actual is in third column
        remaining = budget - actual;
        break;
      }
    }

    return {
      success: true,
      group: group,
      category: category,
      budget: Math.round(budget * 100) / 100,
      actual: Math.round(actual * 100) / 100,
      remaining: Math.round(remaining * 100) / 100
    };

  } catch (error) {
    return {
      success: false,
      error: `‚ùå L·ªói khi t√≠nh s·ªë ti·ªÅn c√≤n l·∫°i: ${error.toString()}`
    };
  }
}

//l·∫•y s·ªë d∆∞ hi·ªán t·∫°i c·ªßa Qu·ªπ -- gia ƒë√¨nh (family), m·ª•c ti√™u (target) ho·∫∑c ti·∫øt ki·ªám (saving)
function getFundBalances(type) {
  const ss = SpreadsheetApp.getActiveSpreadsheet();  

  // Map type to named range
  const typeToRangeMap = {
    "family": "sodu_QuyGiaDinh",
    "target": "sodu_QuyMucDich",
    "saving": "sodu_Tietkiem",
    "all": ["sodu_QuyGiaDinh", "sodu_QuyMucDich", "sodu_Tietkiem"]
  };

  // If specific type is requested
  if (type && type !== "all") {
    const rangeName = typeToRangeMap[type];
    if (!rangeName) {
      return {
        success: false,
        error: `‚ùå Lo·∫°i qu·ªπ kh√¥ng h·ª£p l·ªá: "${type}". C√°c lo·∫°i c√≥ s·∫µn: rainy, target, saving, all`
      };
    }

    try {
      const namedRange = ss.getRangeByName(rangeName);
      if (!namedRange) {
        return {
          success: false,
          error: `‚ùå Kh√¥ng t√¨m th·∫•y named range: "${rangeName}"`
        };
      }

      const values = namedRange.getValues();
      const balances = {};
      let totalBalance = 0;

      values.forEach(([name, amount]) => {
        if (name && amount != null) {
          const numericAmount = parseFloat(amount) || 0;
          balances[name] = Math.round(numericAmount*100)/100;
          totalBalance += Math.round(numericAmount*100)/100;
        }
      });

      return {
        success: true,
        type: type,
        balances: balances,
        total: totalBalance,
        rangeName: rangeName
      };

    } catch (error) {
      return {
        success: false,
        error: `‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ "${rangeName}": ${error.toString()}`
      };
    }
  }

  // If "all" or no type specified, get all fund balances
  try {
    const allBalances = {};
    let grandTotal = 0;
    const rangeNames = typeToRangeMap.all;

    for (const rangeName of rangeNames) {
      const namedRange = ss.getRangeByName(rangeName);
      if (!namedRange) {
        console.warn(`Named range not found: ${rangeName}`);
        continue;
      }

      const values = namedRange.getValues();
      const fundBalances = {};
      let fundTotal = 0;

      values.forEach(([name, amount]) => {
        if (name && amount != null) {
          const numericAmount = parseFloat(amount) || 0;
          fundBalances[name] = Math.round(numericAmount*100)/100;
          fundTotal += Math.round(numericAmount*100)/100;
        }
      });

      // Map range name back to fund type
      const fundType = Object.keys(typeToRangeMap).find(key =>
        typeToRangeMap[key] === rangeName
      );

      allBalances[fundType] = {
        items: fundBalances,
        total: Math.round(fundTotal*100)/100,
        rangeName: rangeName
      };

      grandTotal += Math.round(fundTotal*100)/100;
    }

    return {
      success: true,
      type: "all",
      balances: allBalances,
      grandTotal: grandTotal
    };

  } catch (error) {
    return {
      success: false,
      error: `‚ùå L·ªói khi l·∫•y t·∫•t c·∫£ s·ªë d∆∞ qu·ªπ: ${error.toString()}`
    };
  }
}

//ƒë·ªãnh d·∫°ng s·ªë d∆∞ qu·ªπ ƒë·ªÉ hi·ªÉn th·ªã
function formatFundBalances(balanceData) {
  if (!balanceData.success) {
    return balanceData.error;
  }

  if (balanceData.type === "all") {
    let message = "üí∞*T·ªïng quan s·ªë d∆∞ c√°c qu·ªπ*\n";
    message += "\-" .repeat(15) + "\n";

    const fundNames = {
      "rainy": "üõüQu·ªπ Gia ƒê√¨nh",
      "target": "üéØQu·ªπ M·ª•c ƒê√≠ch",
      "saving": "üíéTi·∫øt Ki·ªám"
    };

    Object.keys(balanceData.balances).forEach(fundType => {
      const fund = balanceData.balances[fundType];
      const fundName = fundNames[fundType] || fundType;

      message += `*${fundName}*\n`;

      if (Object.keys(fund.items).length > 0) {
        Object.entries(fund.items).forEach(([name, amount]) => {
          message += `  ‚Ä¢ ${name}: ‚Ç¨${amount.toFixed(2)}\n`;
        });
        message += `  *T·ªïng\: ‚Ç¨${fund.total.toFixed(2)}*\n\n`;
      } else {
        message += `  _Kh√¥ng c√≥ d·ªØ li·ªáu_\n\n`;
      }
    });

    message += `üè¶ *T·ªïng c·ªông t·∫•t c·∫£ qu·ªπ\: ‚Ç¨${balanceData.grandTotal.toFixed(2)}*`;
    return message;

  } else {
    // Single fund type
    const fundNames = {
      "rainy": "üõüQu·ªπ Gia ƒê√¨nh",
      "target": "üéØQu·ªπ M·ª•c ƒê√≠ch",
      "saving": "üíéTi·∫øt Ki·ªám"
    };

    const fundName = fundNames[balanceData.type] || balanceData.type;
    let message = `üí∞*${fundName}*\n`;
    message += "\-" .repeat(15) + "\n";

    if (Object.keys(balanceData.balances).length > 0) {
      Object.entries(balanceData.balances).forEach(([name, amount]) => {
        message += `‚Ä¢ ${name}: ‚Ç¨${amount.toFixed(2)}\n`;
      });
      message += `\n*T·ªïng\: ‚Ç¨${balanceData.total.toFixed(2)}*`;
    } else {
      message += "_Kh√¥ng c√≥ d·ªØ li·ªáu_";
    }

    return message;
  }
}

//l·∫•y d·ªØ li·ªáu s·ªë d∆∞ t√†i kho·∫£n ng√¢n h√†ng t·ª´ dashboard
function getBankAccountBalances() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const props = PropertiesService.getScriptProperties();
    
    // Get the named range from sheet settings
    const rangeName = props.getProperty('bankAccountBalanceRange') || 'sodu_TaiKhoanNganHang';
    
    const namedRange = ss.getRangeByName(rangeName);
    if (!namedRange) {
      return {
        success: false,
        error: `‚ùå Kh√¥ng t√¨m th·∫•y named range: "${rangeName}"`
      };
    }

    const values = namedRange.getValues();
    const timezone = Session.getScriptTimeZone();
    
    // Expected columns: Group Name, Bank Account Balance, Difference, Bank Account Number, Update Date
    const bankBalances = [];
    let totalBankBalance = 0;
    let totalDifference = 0;

    // Skip header row if exists
    const startRow = values[0][0] && values[0][0].toString().toLowerCase().includes('group') ? 1 : 0;

    for (let i = startRow; i < values.length; i++) {
      const row = values[i];
      
      // Check if row has valid data
      if (row[0] && row[1] !== null && row[1] !== undefined) {
        const groupName = row[0];
        const bankBalance = parseFloat(row[1]) || 0;
        const difference = parseFloat(row[2]) || 0;
        const accountNumber = row[3] || '';
        const updateDate = row[4] || '';      

        bankBalances.push({
          groupName: groupName,
          bankBalance: Math.round(bankBalance * 100) / 100,
          difference: Math.round(difference * 100) / 100,          
          accountNumber: accountNumber,
          updateDate: Utilities.formatDate(updateDate, timezone, "dd/MM/yyyy")
        });

        totalBankBalance += Math.round(bankBalance * 100) / 100;
        totalDifference += Math.round(difference * 100) / 100;
      }
    }

    return {
      success: true,
      bankBalances: bankBalances,
      totalBankBalance: totalBankBalance,
      totalDifference: totalDifference,
      rangeName: rangeName,
      lastUpdated: new Date().toISOString()
    };

  } catch (error) {
    return {
      success: false,
      error: `‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu s·ªë d∆∞ t√†i kho·∫£n ng√¢n h√†ng: ${error.toString()}`
    };
  }
}

//ƒë·ªãnh d·∫°ng s·ªë d∆∞ t√†i kho·∫£n ng√¢n h√†ng ƒë·ªÉ hi·ªÉn th·ªã
function formatBankAccountBalances(balanceData) {
  if (!balanceData.success) {
    return balanceData.error;
  }

  let message = "üè¶*S·ªë d∆∞ t√†i kho·∫£n ng√¢n h√†ng*\n";
  message += "\-" .repeat(15) + "\n";

  if (balanceData.bankBalances.length === 0) {
    message += "_Kh√¥ng c√≥ d·ªØ li·ªáu s·ªë d∆∞ t√†i kho·∫£n ng√¢n h√†ng_\n";
    return message;
  }

  // Group display names mapping, exclude "Qu·ªπ m·ª•c ti√™u" and "Ti·∫øt ki·ªám" as they do not have email notifications
  const groupDisplayNames = {
    "Chi ph√≠ c·ªë ƒë·ªãnh": "üè°Chi ph√≠ c·ªë ƒë·ªãnh",
    "Chi ph√≠ bi·∫øn ƒë·ªïi": "üõíChi ph√≠ bi·∫øn ƒë·ªïi", 
    "Qu·ªπ gia ƒë√¨nh": "üõüQu·ªπ gia ƒë√¨nh",
  };

  balanceData.bankBalances.forEach(account => {
    const displayName = groupDisplayNames[account.groupName] || account.groupName;
    
    message += `*${displayName}*: `;
    message += ` *‚Ç¨${account.bankBalance.toFixed(2)}*`;  
    
    if (account.accountNumber) {
      message += ` trong TK s·ªë: ${account.accountNumber}.`;
    }
    
    if (account.updateDate) {
      message += ` _C·∫≠p nh·∫≠t: ${account.updateDate}_\n\n`;
    }
  });

  //message += "=" .repeat(35) + "\n";
  //message += `**T·ªïng s·ªë d∆∞ TK: ‚Ç¨${balanceData.totalBankBalance.toFixed(2)}**\n`;

  return message;
}

//c·∫≠p nh·∫≠t s·ªë d∆∞ t√†i kho·∫£n ng√¢n h√†ng
function updateBankAccountBalance(accountNumber, newBalance, updateDate) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const props = PropertiesService.getScriptProperties();
    
    // Get the named range from sheet settings
    const rangeName = props.getProperty('bankAccountBalanceRange') || 'sodu_TaiKhoanNganHang';
    
    const namedRange = ss.getRangeByName(rangeName);
    if (!namedRange) {
      return {
        success: false,
        error: `‚ùå Kh√¥ng t√¨m th·∫•y named range: "${rangeName}"`
      };
    }

    const values = namedRange.getValues();
    const timezone = Session.getScriptTimeZone();
    
    // Parse the new balance
    const balanceAmount = parseFloat(newBalance.replace(/[‚Ç¨,\s]/g, '')) || 0;
    const formattedBalance = Math.round(balanceAmount * 100) / 100;
    
    // Parse the update date
    let parsedDate;
    try {
      const dateParts = updateDate.split('/');
      if (dateParts.length === 3) {
        parsedDate = new Date(`${dateParts[2]}-${dateParts[1]}-${dateParts[0]}`);
      } else {
        parsedDate = new Date(updateDate);
      }
    } catch (e) {
      parsedDate = new Date();
    }
    
    const formattedDate = Utilities.formatDate(parsedDate, timezone, "dd/MM/yyyy");
    
    // Find the row with matching account number
    let foundRow = -1;
    let currentBalance = 0;
    let groupName = '';
    
    // Skip header row if exists
    const startRow = values[0][0] && values[0][0].toString().toLowerCase().includes('group') ? 1 : 0;
    
    for (let i = startRow; i < values.length; i++) {
      const row = values[i];
      const rowAccountNumber = row[3] || ''; // Column D: Account Number
      
      if (rowAccountNumber && rowAccountNumber.toString().trim() === accountNumber.toString().trim()) {
        foundRow = i;        
        groupName = row[0] || ''; // Column A: Group Name
        currentBalance = row[1] || 0; // Column B: Current Balance  
        break;
      }
    }
    
    if (foundRow === -1) {
      return {
        success: false,
        error: `‚ùå Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n v·ªõi s·ªë: ${accountNumber}`
      };
    }        
    
    // Update the 2nd and 5th columns of the range
    // Column 2: Bank Account Balance, Column 5: Update Date
    sheet = namedRange.getSheet ();
    sheet.getRange(namedRange.getRow()+foundRow, namedRange.getColumn()+1).setValue(formattedBalance); // 2nd column: Balance    
    sheet.getRange(namedRange.getRow()+foundRow, namedRange.getColumn()+4).setValue(formattedDate); // 5th column: Update Date

    // Calculate difference
    const difference = sheet.getRange(namedRange.getRow()+foundRow, namedRange.getColumn()+2).getValue();
    
    return {
      success: true,
      accountNumber: accountNumber,
      oldBalance: Math.round(currentBalance * 100) / 100,
      newBalance: formattedBalance,      
      difference: difference,
      groupName: groupName,
      updateDate: formattedDate,
      message: `‚úÖ ƒê√£ c·∫≠p nh·∫≠t s·ªë d∆∞ t√†i kho·∫£n *${groupName}*(_#${accountNumber}_)\nüí∞ T·ª´: ‚Ç¨${Math.round(currentBalance * 100) / 100} ‚Üí ‚Ç¨${formattedBalance}\nüìä Ch√™nh l·ªách v·ªõi t√≠nh to√°n: ‚Ç¨${Math.round(difference * 100) / 100}`
    };
    
  } catch (error) {
    return {
      success: false,
      error: `‚ùå L·ªói khi c·∫≠p nh·∫≠t s·ªë d∆∞ t√†i kho·∫£n: ${error.toString()}`
    };
  }
}

//---------------TRANSACTION ID MANAGEMENT-------------------//
//t√¨m d√≤ng giao d·ªãch theo ID
function findTransactionRowById(sheetName, transactionId) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(sheetName);

    if (!sheet) {
      return {
        success: false,
        error: `‚ùå Kh√¥ng t√¨m th·∫•y sheet "${sheetName}"`
      };
    }

    const data = sheet.getDataRange().getValues();

    // Search for the transaction ID in column G (index 6)
    for (let i = 1; i < data.length; i++) { // Skip header row
      const row = data[i];
      const rowId = row[6]; // Column G: ID

      if (rowId === transactionId) {
        return {
          success: true,
          rowNumber: i + 1,
          rowData: {
            date: row[0],
            description: row[1],
            amount: row[2],
            location: row[3],
            category: row[4],
            bankComment: row[5],
            id: row[6]
          }
        };
      }
    }

    return {
      success: false,
      error: `‚ùå Kh√¥ng t√¨m th·∫•y giao d·ªãch v·ªõi ID: ${transactionId}`
    };

  } catch (error) {
    return {
      success: false,
      error: `‚ùå L·ªói khi t√¨m giao d·ªãch: ${error.toString()}`
    };
  }
}

//c·∫≠p nh·∫≠t giao d·ªãch theo ID
function updateTransactionById(sheetName, transactionId, updatedData) {
  try {
    const findResult = findTransactionRowById(sheetName, transactionId);

    if (!findResult.success) {
      return findResult;
    }

    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(sheetName);
    const rowNumber = findResult.rowNumber;

    // Update the row with new data, keeping the same ID
    const { date, description, amount, location, category, bankComment } = updatedData;

    sheet.getRange(rowNumber, 1, 1, 7).setValues([[
      date || findResult.rowData.date,
      description || findResult.rowData.description,
      amount || findResult.rowData.amount,
      location || findResult.rowData.location,
      category || findResult.rowData.category,
      bankComment || findResult.rowData.bankComment,
      transactionId // Keep the same ID
    ]]);

    return {
      success: true,
      message: `‚úÖ ƒê√£ c·∫≠p nh·∫≠t giao d·ªãch ID: ${transactionId}`,
      rowNumber: rowNumber,
      transactionId: transactionId
    };

  } catch (error) {
    return {
      success: false,
      error: `‚ùå L·ªói khi c·∫≠p nh·∫≠t giao d·ªãch: ${error.toString()}`
    };
  }
}

//x√≥a giao d·ªãch theo ID
function deleteTransactionById(sheetName, transactionId) {
  try {
    const findResult = findTransactionRowById(sheetName, transactionId);

    if (!findResult.success) {
      return findResult;
    }

    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(sheetName);
    const rowNumber = findResult.rowNumber;

    // Delete the row
    sheet.deleteRow(rowNumber);

    return {
      success: true,
      message: `‚úÖ ƒê√£ x√≥a giao d·ªãch ID: ${transactionId}`,
      deletedTransaction: findResult.rowData
    };

  } catch (error) {
    return {
      success: false,
      error: `‚ùå L·ªói khi x√≥a giao d·ªãch: ${error.toString()}`
    };
  }
}

//t·∫°o ID cho c√°c giao d·ªãch ch∆∞a c√≥ ID (migration function)
function migrateTransactionID(sheetName = null) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();

    // Define all transaction group sheets
    const transactionSheets = [
      "üí∞Thu nh·∫≠p",
      "üè°Chi ph√≠ c·ªë ƒë·ªãnh",
      "üõíChi ph√≠ bi·∫øn ƒë·ªïi",
      "üõüQu·ªπ gia ƒë√¨nh",
      "‚úàÔ∏èQu·ªπ m·ª•c ƒë√≠ch",
      "ü´ôTi·∫øt ki·ªám"
    ];

    // Determine which sheets to process
    const sheetsToProcess = sheetName ? [sheetName] : transactionSheets;

    let totalProcessed = 0;
    let totalUpdated = 0;
    const results = [];

    sheetsToProcess.forEach(currentSheetName => {
      const sheet = ss.getSheetByName(currentSheetName);

      if (!sheet) {
        results.push({
          sheetName: currentSheetName,
          success: false,
          error: `‚ùå Kh√¥ng t√¨m th·∫•y sheet "${currentSheetName}"`
        });
        return;
      }

      const data = sheet.getDataRange().getValues();
      let sheetUpdated = 0;
      let sheetProcessed = 0;

      // Process each row (skip header row)
      for (let i = 1; i < data.length; i++) {
        const row = data[i];
        sheetProcessed++;

        // Check if row has data and if ID column (column G, index 6) is empty
        if (row[0] && row[1] && (!row[6] || row[6].toString().trim() === '')) {
          // Generate new ID
          const newId = generateTransactionId();

          // Update the ID column (column G)
          sheet.getRange(i + 1, 7).setValue(newId);
          sheetUpdated++;

          Logger.log(`Generated ID for ${currentSheetName} row ${i + 1}: ${newId}`);
        }
      }

      totalProcessed += sheetProcessed;
      totalUpdated += sheetUpdated;

      results.push({
        sheetName: currentSheetName,
        success: true,
        processed: sheetProcessed,
        updated: sheetUpdated,
        message: `‚úÖ ${currentSheetName}: ${sheetUpdated}/${sheetProcessed} giao d·ªãch ƒë∆∞·ª£c c·∫≠p nh·∫≠t ID`
      });
    });

    // Generate summary message
    let summaryMessage = `üÜî **T·∫°o ID cho giao d·ªãch ho√†n t·∫•t**\n`;
    summaryMessage += `üìä T·ªïng k·∫øt: ${totalUpdated}/${totalProcessed} giao d·ªãch ƒë∆∞·ª£c c·∫≠p nh·∫≠t ID\n\n`;

    results.forEach(result => {
      if (result.success) {
        summaryMessage += `${result.message}\n`;
      } else {
        summaryMessage += `${result.error}\n`;
      }
    });

    return {
      success: true,
      totalProcessed: totalProcessed,
      totalUpdated: totalUpdated,
      results: results,
      message: summaryMessage
    };

  } catch (error) {
    return {
      success: false,
      error: `‚ùå L·ªói khi t·∫°o ID: ${error.toString()}`
    };
  }
}

//ki·ªÉm tra c√°c giao d·ªãch thi·∫øu ID
function checkMissingTxID(sheetName = null) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();

    // Define all transaction group sheets
    const transactionSheets = [
      "üí∞Thu nh·∫≠p",
      "üè°Chi ph√≠ c·ªë ƒë·ªãnh",
      "üõíChi ph√≠ bi·∫øn ƒë·ªïi",
      "üõüQu·ªπ gia ƒë√¨nh",
      "‚úàÔ∏èQu·ªπ m·ª•c ƒë√≠ch",
      "ü´ôTi·∫øt ki·ªám"
    ];

    // Determine which sheets to check
    const sheetsToCheck = sheetName ? [sheetName] : transactionSheets;

    let totalTransactions = 0;
    let totalMissing = 0;
    const results = [];

    sheetsToCheck.forEach(currentSheetName => {
      const sheet = ss.getSheetByName(currentSheetName);

      if (!sheet) {
        results.push({
          sheetName: currentSheetName,
          success: false,
          error: `‚ùå Kh√¥ng t√¨m th·∫•y sheet "${currentSheetName}"`
        });
        return;
      }

      const data = sheet.getDataRange().getValues();
      let sheetTotal = 0;
      let sheetMissing = 0;
      const missingRows = [];

      // Check each row (skip header row)
      for (let i = 1; i < data.length; i++) {
        const row = data[i];

        // Count rows with transaction data
        if (row[0] && row[1]) {
          sheetTotal++;

          // Check if ID column (column G, index 6) is empty
          if (!row[6] || row[6].toString().trim() === '') {
            sheetMissing++;
            missingRows.push({
              rowNumber: i + 1,
              date: row[0],
              description: row[1],
              amount: row[2]
            });
          }
        }
      }

      totalTransactions += sheetTotal;
      totalMissing += sheetMissing;

      results.push({
        sheetName: currentSheetName,
        success: true,
        total: sheetTotal,
        missing: sheetMissing,
        missingRows: missingRows,
        message: `üìã ${currentSheetName}: ${sheetMissing}/${sheetTotal} giao d·ªãch thi·∫øu ID`
      });
    });

    // Generate summary message
    let summaryMessage = `üîç **Ki·ªÉm tra ID giao d·ªãch**\n`;
    summaryMessage += `üìä T·ªïng k·∫øt: ${totalMissing}/${totalTransactions} giao d·ªãch thi·∫øu ID\n\n`;

    results.forEach(result => {
      if (result.success) {
        summaryMessage += `${result.message}\n`;
        if (result.missing > 0 && result.missingRows.length <= 5) {
          // Show first few missing transactions as examples
          result.missingRows.slice(0, 3).forEach(row => {
            summaryMessage += `  ‚Ä¢ D√≤ng ${row.rowNumber}: ${row.date} - ${row.description}\n`;
          });
          if (result.missingRows.length > 3) {
            summaryMessage += `  ‚Ä¢ ... v√† ${result.missingRows.length - 3} giao d·ªãch kh√°c\n`;
          }
        }
      } else {
        summaryMessage += `${result.error}\n`;
      }
    });

    return {
      success: true,
      totalTransactions: totalTransactions,
      totalMissing: totalMissing,
      results: results,
      message: summaryMessage
    };

  } catch (error) {
    return {
      success: false,
      error: `‚ùå L·ªói khi ki·ªÉm tra ID: ${error.toString()}`
    };
  }
}

//---------------SEARCH-------------------//
//t√¨m ki·∫øm giao d·ªãch theo c√°c ti√™u ch√≠
function searchTx(searchParams) {
  const { startDate, endDate, groups, categories, keywords } = searchParams;
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const timezone = Session.getScriptTimeZone();

  // Get all available transaction groups (sheet names)
  const availableGroups = [
    "üí∞Thu nh·∫≠p",
    "üè°Chi ph√≠ c·ªë ƒë·ªãnh",
    "üõíChi ph√≠ bi·∫øn ƒë·ªïi",
    "üõüQu·ªπ gia ƒë√¨nh",
    "‚úàÔ∏èQu·ªπ m·ª•c ƒë√≠ch",
    "ü´ôTi·∫øt ki·ªám"
  ];

  // Determine which groups to search
  let groupsToSearch = groups && groups.length > 0 ? groups : availableGroups;

  // Parse date filters
  let startDateObj = null;
  let endDateObj = null;

  if (startDate) {
    try {
      const dateParts = startDate.split('/');
      if (dateParts.length === 3) {
        startDateObj = new Date(`${dateParts[2]}-${dateParts[1]}-${dateParts[0]}`);
      }
    } catch (e) {
      Logger.log(`Invalid start date format: ${startDate}`);
    }
  }

  if (endDate) {
    try {
      const dateParts = endDate.split('/');
      if (dateParts.length === 3) {
        endDateObj = new Date(`${dateParts[2]}-${dateParts[1]}-${dateParts[0]}`);
      }
    } catch (e) {
      Logger.log(`Invalid end date format: ${endDate}`);
    }
  }

  const searchResults = [];
  let totalMatches = 0;

  // Search through each group
  groupsToSearch.forEach(groupName => {
    const sheet = ss.getSheetByName(groupName);
    if (!sheet) {
      Logger.log(`Sheet not found: ${groupName}`);
      return;
    }

    const data = sheet.getDataRange().getValues();
    if (data.length <= 1) return; // Skip if no data (only header)

    const groupMatches = [];

    // Search through each transaction (skip header row)
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      const rowDate = row[0];
      const rowDesc = row[1] || '';
      const rowAmount = row[2];
      const rowLocation = row[3] || '';
      const rowCategory = row[4] || '';
      const rowBankComment = row[5] || '';
      const rowId = row[6] || '';

      // Skip empty rows
      if (!rowDate || !rowDesc) continue;

      let matches = true;

      // Date range filter
      if (startDateObj || endDateObj) {
        try {
          const transactionDate = new Date(rowDate);
          if (startDateObj && transactionDate < startDateObj) matches = false;
          if (endDateObj && transactionDate > endDateObj) matches = false;
        } catch (e) {
          matches = false; // Skip rows with invalid dates
        }
      }

      // Category filter
      if (matches && categories && categories.length > 0) {
        matches = categories.some(cat =>
          rowCategory.toLowerCase().includes(cat.toLowerCase())
        );
      }

      // Keywords filter (search in description and bank comment)
      if (matches && keywords && keywords.length > 0) {
          matches = keywords.some(keyword =>
            rowDesc.toLowerCase().includes(keyword.toLowerCase()) ||
            rowBankComment.toLowerCase().includes(keyword.toLowerCase())
        );
      }

      if (matches) {
        groupMatches.push({
          date: rowDate,
          description: rowDesc,
          amount: rowAmount,
          location: rowLocation,
          category: rowCategory,
          bankComment: rowBankComment,
          id: rowId,
          rowNumber: i + 1
        });
        totalMatches++;
      }
    }

    if (groupMatches.length > 0) {
      searchResults.push({
        groupName: groupName,
        transactions: groupMatches
      });
    }
  });

  return {
    success: true,
    results: searchResults,
    totalMatches: totalMatches,
    searchParams: searchParams
  };
}

//ƒë·ªãnh d·∫°ng k·∫øt qu·∫£ t√¨m ki·∫øm theo c·∫•u tr√∫c ph√¢n c·∫•p
function formatSearchResults(searchData) {
  if (!searchData.success || searchData.totalMatches === 0) {
    return "üîç Kh√¥ng t√¨m th·∫•y giao d·ªãch n√†o ph√π h·ª£p v·ªõi ti√™u ch√≠ t√¨m ki·∫øm.";
  }

  const { results, totalMatches, searchParams } = searchData;
  const timezone = Session.getScriptTimeZone();

  let message = `üîç *K·∫øt qu·∫£ t√¨m ki·∫øm* \(${totalMatches} giao d·ªãch\)\n`;
  message += "\=" .repeat(15) + "\n\n";

  // Add search criteria summary
  if (searchParams.startDate || searchParams.endDate) {
    message += "üìÖ: ";
    if (searchParams.startDate && searchParams.endDate) {
      message += `${searchParams.startDate} - ${searchParams.endDate}\n`;
    } else if (searchParams.startDate) {
      message += `${searchParams.startDate}\n`;
    } else if (searchParams.endDate) {
      message += `-> ${searchParams.endDate}\n`;
    }
  }

  if (searchParams.groups && searchParams.groups.length > 0) {
    message += `${searchParams.groups.join(', ')}\n`;
  }

  if (searchParams.categories && searchParams.categories.length > 0) {
    message += `${searchParams.categories.join(', ')}\n`;
  }

  if (searchParams.keywords && searchParams.keywords.length > 0) {
    message += `üîé *T·ª´ kh√≥a*\: "${searchParams.keywords.join(', ')}"\n`;
  }

  message += "\n" + "\=" .repeat(15) + "\n\n";

  // Format results by group > category > date
  results.forEach(groupResult => {
    message += `*${groupResult.groupName}*\n`;
    message += "\-" .repeat(15) + "\n";

    // Group transactions by category
    const categorizedTx = {};
    groupResult.transactions.forEach(tx => {
      const category = tx.category || 'Kh√°c';
      if (!categorizedTx[category]) {
        categorizedTx[category] = [];
      }
      categorizedTx[category].push(tx);
    });

    // Sort and display by category
    Object.keys(categorizedTx).sort().forEach(category => {
      message += `\n*${category}*\n`;

      // Sort transactions by date (newest first)
      const sortedTx = categorizedTx[category].sort((a, b) => {
        try {
          return new Date(b.date) - new Date(a.date);
        } catch (e) {
          return 0;
        }
      });

      sortedTx.forEach(tx => {
        try {
          const formattedDate = Utilities.formatDate(new Date(tx.date), timezone, "dd/MM");
          const amount = typeof tx.amount === 'number' ? tx.amount.toFixed(2) : tx.amount;
          message += `  ‚Ä¢ *${formattedDate}*\: ${tx.description} \- *‚Ç¨${amount}*\n`;
        } catch (e) {
          // Fallback for invalid dates
          const amount = typeof tx.amount === 'number' ? tx.amount.toFixed(2) : tx.amount;
          message += `  ‚Ä¢ ${tx.date}\: ${tx.description} \- ‚Ç¨${amount}\n`;
        }
      });
    });

    message += "\n";
  });

  return message.trim();
}

//---------------CONTEXT-------------------//
//l·∫•y danh s√°ch c√°c nh√≥m v√† m·ª•c giao d·ªãch
function getTxCat() {
  const namedRanges = [
    "ThuNhap",
    "ChiPhiCoDinh",
    "ChiPhiBienDoi",
    "QuyGiaDinh",
    "QuyMucDich",
    "TietKiem"
  ];

  const catTxSheet = SpreadsheetApp.openById(SPREADSHEET_ID);

  const promptParts = [];
  promptParts.push("## C√°c nh√≥m/m·ª•c giao d·ªãch");

  namedRanges.forEach((rangeName, index) => {
    const namedRange = catTxSheet.getRangeByName(rangeName);
    if (!namedRange) return;

    const sheet = namedRange.getSheet();
    const startRow = namedRange.getRow();    
    const numRows = namedRange.getNumRows();

    // M·ªü r·ªông t·ª´ c·ªôt A ƒë·∫øn C => width = 3
    const fullRange = sheet.getRange(startRow, 1, numRows, 3);
    const values = fullRange.getValues();

    // L·∫•y t√™n nh√≥m t·ª´ c·ªôt A (duy nh·∫•t trong ƒëo·∫°n n√†y)
    const uniqueGroupNames = [...new Set(values.map(row => row[0]).filter(name => !!name))];
    const groupName = uniqueGroupNames[0] || rangeName;

    const items = [];
    values.forEach(([, muc, mieuta]) => {
      if (muc && mieuta) {
        items.push(`  ${muc}: ${mieuta}`);
      }
    });

    if (items.length > 0) {
      promptParts.push(`\n### ${groupName}:\n${items.join('\n')}`);
    }
  });
  
  const instructionCatPrompt = promptParts.join("\n");
  return instructionCatPrompt;
}

//l·∫•y ho√†n c·∫£nh gia ƒë√¨nh
function getFamilyContext() {
  const props = PropertiesService.getScriptProperties();
  const sheetName = props.getProperty('sheet_ContextConfig') || 'ü§ñT√πy ch·ªânh Prompts';

  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName(sheetName);
  if (!sheet) return "";

  const data = sheet.getDataRange().getValues();
  const headers = data[0];
  const rows = data.slice(1);

  const contextMap = new Map (); // Nh√≥m -> array of lines

  rows.forEach(([nhom, ten, noidung]) => {
    if (!nhom || !ten || !noidung) return;
    if (!contextMap.has(nhom)) contextMap.set(nhom, []);
    contextMap.get(nhom).push(`- ${ten}: ${noidung}`);
  });

  const parts = [];

  if (contextMap.has("Ho√†n c·∫£nh")) {
    parts.push("## Ho√†n c·∫£nh h·ªô gia ƒë√¨nh");
    parts.push(...contextMap.get("Ho√†n c·∫£nh"));
  }

  let contextPrompt = parts.join("\n");
  return contextPrompt;
}

//l·∫•y ch·ªâ d·∫´n ph√¢n lo·∫°i giao d·ªãch
function getCategoriseInstructions() {
  const props = PropertiesService.getScriptProperties();
  const sheetName = props.getProperty('sheet_ContextConfig') || 'ü§ñT√πy ch·ªânh Prompts';

  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName(sheetName);
  if (!sheet) return "";

  const data = sheet.getDataRange().getValues();
  const headers = data[0];
  const rows = data.slice(1);

  const contextMap = new Map (); // Nh√≥m -> array of lines

  rows.forEach(([nhom, ten, noidung]) => {
    if (!nhom || !ten || !noidung) return;
    if (!contextMap.has(nhom)) contextMap.set(nhom, []);
    contextMap.get(nhom).push(`- ${ten}: ${noidung}`);
  });

  const parts = [];

   if (contextMap.has("Ch·ªâ d·∫´n ph√¢n lo·∫°i")) {
    parts.push("## H∆∞·ªõng d·∫´n ph√¢n lo·∫°i giao d·ªãch:");
    parts.push(...contextMap.get("Ch·ªâ d·∫´n ph√¢n lo·∫°i"));
  }

  let contextPrompt = parts.join("\n");  
  return contextPrompt;
}

//l·∫•y ch·ªâ d·∫´n t·∫°o d·ª± to√°n chi ti√™u
function getBudgetInstructions() {
  const props = PropertiesService.getScriptProperties();
  const sheetName = props.getProperty('sheet_ContextConfig') || 'ü§ñT√πy ch·ªânh Prompts';

  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName(sheetName);
  if (!sheet) return "";

  const data = sheet.getDataRange().getValues();
  const headers = data[0];
  const rows = data.slice(1);

  const contextMap = new Map (); // Nh√≥m -> array of lines

  rows.forEach(([nhom, ten, noidung]) => {
    if (!nhom || !ten || !noidung) return;
    if (!contextMap.has(nhom)) contextMap.set(nhom, []);
    contextMap.get(nhom).push(`- ${ten}: ${noidung}`);
  });

  const parts = [];

  if (contextMap.has("Ch·ªâ d·∫´n d·ª± to√°n")) {
    parts.push("## H∆∞·ªõng d·∫´n d·ª± to√°n:");
    parts.push(...contextMap.get("Ch·ªâ d·∫´n d·ª± to√°n"));
  }

  let contextPrompt = parts.join("\n");  
  return contextPrompt;
}